
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000029a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000906  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071a  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034b  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c7  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000258  00000000  00000000  00001ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001dfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	1a c0       	rjmp	.+52     	; 0x38 <__bad_interrupt>
   4:	19 c0       	rjmp	.+50     	; 0x38 <__bad_interrupt>
   6:	18 c0       	rjmp	.+48     	; 0x38 <__bad_interrupt>
   8:	17 c0       	rjmp	.+46     	; 0x38 <__bad_interrupt>
   a:	84 c0       	rjmp	.+264    	; 0x114 <__vector_5>
   c:	15 c0       	rjmp	.+42     	; 0x38 <__bad_interrupt>
   e:	81 c0       	rjmp	.+258    	; 0x112 <__vector_7>
  10:	13 c0       	rjmp	.+38     	; 0x38 <__bad_interrupt>
  12:	12 c0       	rjmp	.+36     	; 0x38 <__bad_interrupt>
  14:	11 c0       	rjmp	.+34     	; 0x38 <__bad_interrupt>
  16:	10 c0       	rjmp	.+32     	; 0x38 <__bad_interrupt>
  18:	0f c0       	rjmp	.+30     	; 0x38 <__bad_interrupt>
  1a:	0e c0       	rjmp	.+28     	; 0x38 <__bad_interrupt>
  1c:	0d c0       	rjmp	.+26     	; 0x38 <__bad_interrupt>
  1e:	0c c0       	rjmp	.+24     	; 0x38 <__bad_interrupt>
  20:	77 c0       	rjmp	.+238    	; 0x110 <__vector_16>
  22:	0a c0       	rjmp	.+20     	; 0x38 <__bad_interrupt>
  24:	09 c0       	rjmp	.+18     	; 0x38 <__bad_interrupt>
  26:	08 c0       	rjmp	.+16     	; 0x38 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d1 e0       	ldi	r29, 0x01	; 1
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61
  34:	83 d0       	rcall	.+262    	; 0x13c <main>
  36:	2f c1       	rjmp	.+606    	; 0x296 <_exit>

00000038 <__bad_interrupt>:
  38:	e3 cf       	rjmp	.-58     	; 0x0 <__vectors>

0000003a <system_sleep>:
#define REF_AVCC 1


// Sleep
void system_sleep(void) {
	set_sleep_mode(SLEEP_MODE_PWR_DOWN); // Set sleep mode
  3a:	83 b7       	in	r24, 0x33	; 51
  3c:	89 7f       	andi	r24, 0xF9	; 249
  3e:	84 60       	ori	r24, 0x04	; 4
  40:	83 bf       	out	0x33, r24	; 51
	sleep_mode(); // System sleeps here
  42:	83 b7       	in	r24, 0x33	; 51
  44:	81 60       	ori	r24, 0x01	; 1
  46:	83 bf       	out	0x33, r24	; 51
  48:	88 95       	sleep
  4a:	83 b7       	in	r24, 0x33	; 51
  4c:	8e 7f       	andi	r24, 0xFE	; 254
  4e:	83 bf       	out	0x33, r24	; 51
  50:	08 95       	ret

00000052 <setup_watchdog>:
}

// Setup watchdog timed sequence
void setup_watchdog(uint8_t wdDelay) {
  52:	8a 30       	cpi	r24, 0x0A	; 10
  54:	08 f0       	brcs	.+2      	; 0x58 <setup_watchdog+0x6>
  56:	89 e0       	ldi	r24, 0x09	; 9
	if (wdDelay > 9) { 
		wdDelay = 9;
	}
	
	uint8_t bb = wdDelay & 7;
  58:	98 2f       	mov	r25, r24
  5a:	97 70       	andi	r25, 0x07	; 7
	if (wdDelay > 7) { 
  5c:	88 30       	cpi	r24, 0x08	; 8
  5e:	08 f0       	brcs	.+2      	; 0x62 <setup_watchdog+0x10>
		bb |= (1<<5);
  60:	90 62       	ori	r25, 0x20	; 32
	}
	
	cli(); // Turn interrupts off
  62:	f8 94       	cli
	asm("WDR");
  64:	a8 95       	wdr
	
	MCUSR &= ~(1<<WDRF);
  66:	84 b7       	in	r24, 0x34	; 52
  68:	87 7f       	andi	r24, 0xF7	; 247
  6a:	84 bf       	out	0x34, r24	; 52
	// Start timed sequence
	WDTCSR |= (1<<WDCE) | (1<<WDE);
  6c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
  70:	88 61       	ori	r24, 0x18	; 24
  72:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
	// Set new watchdog timeout value
	WDTCSR = bb | (1<<WDIE);
  76:	90 64       	ori	r25, 0x40	; 64
  78:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
	
	sei(); // Turn interrupts back on
  7c:	78 94       	sei
  7e:	08 95       	ret

00000080 <turn_off_watchdog>:
}

// Turn off the Watchdog
void turn_off_watchdog(void) {
	cli(); // Turn interrupts off
  80:	f8 94       	cli
	asm("WDR");
  82:	a8 95       	wdr
	MCUSR &= ~(1<<WDRF);
  84:	84 b7       	in	r24, 0x34	; 52
  86:	87 7f       	andi	r24, 0xF7	; 247
  88:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDIE);
  8a:	e0 e6       	ldi	r30, 0x60	; 96
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 65       	ori	r24, 0x50	; 80
  92:	80 83       	st	Z, r24
	WDTCSR = 0;
  94:	10 82       	st	Z, r1
	sei(); // Turn interrupts back on
  96:	78 94       	sei
  98:	08 95       	ret

0000009a <watchdog_sleep>:
}

// Watchdog sleep function - setup, sleep and turn off
void watchdog_sleep(uint8_t timeout) { 
	setup_watchdog(timeout);
  9a:	db df       	rcall	.-74     	; 0x52 <setup_watchdog>
	system_sleep();
  9c:	ce df       	rcall	.-100    	; 0x3a <system_sleep>
	turn_off_watchdog();
  9e:	f0 cf       	rjmp	.-32     	; 0x80 <turn_off_watchdog>

000000a0 <adc_read>:
}

// Read the ADC
int adc_read(uint8_t pin, uint8_t reference) {
  a0:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t low, high;
	
	// Set the analog reference (high two bits of ADMUX) and select the channel (low 4 bits)
	if (reference == REF_1_1V) {
  a2:	61 11       	cpse	r22, r1
		ADMUX = (pin & 0x0F); // 1.1V reference
	}
	else {
		ADMUX = (1<<REFS0) | (pin & 0x0F); // AVCC Ref
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	}
	
	set_sleep_mode(SLEEP_MODE_ADC); // Set sleep mode ADC
  aa:	83 b7       	in	r24, 0x33	; 51
  ac:	89 7f       	andi	r24, 0xF9	; 249
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	83 bf       	out	0x33, r24	; 51
	sleep_mode(); // System sleeps here
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	83 bf       	out	0x33, r24	; 51
  b8:	88 95       	sleep
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	83 bf       	out	0x33, r24	; 51
	
	// Read ADCL first
	low = ADCL;
  c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
	high = ADCH;
  c4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
	
	// combine the two bytes
	return (high << 8) | low;
  c8:	90 e0       	ldi	r25, 0x00	; 0
}
  ca:	92 2b       	or	r25, r18
  cc:	08 95       	ret

000000ce <setup>:

// Setup
void setup(void) {
	// Turn on pull ups
	PORTB |= (1<<PB2) | (1<<PB3) | (1<<PB4) | (1<<PB5) | (1<<PB6); 
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	8c 67       	ori	r24, 0x7C	; 124
  d2:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC4) | (1<<PC5) | (1<<PC6) | (1<<PC7); 
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	87 6f       	ori	r24, 0xF7	; 247
  d8:	88 b9       	out	0x08, r24	; 8
	
	// Setup outputs
	DDRD |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8);
  da:	8a b1       	in	r24, 0x0a	; 10
  dc:	8f 6e       	ori	r24, 0xEF	; 239
  de:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<LED5)  | (1<<LED9) | (1<<LED10);
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	83 68       	ori	r24, 0x83	; 131
  e4:	84 b9       	out	0x04, r24	; 4
	//PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
	//PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
	
	// Set ADC prescale factor to 8
	// 1 MHz / 8 = 125 KHz, inside the desired 50-200 KHz range.
	sbi(ADCSRA, ADPS1);
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
  f0:	80 81       	ld	r24, Z
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	80 83       	st	Z, r24
	
	// Enable ADC/interrupt
	sbi(ADCSRA, ADEN);
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADIE);
  fc:	80 81       	ld	r24, Z
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	80 83       	st	Z, r24
	
	// Enable pin change interrupt on PD4
	sbi(PCMSK2, PCINT20);
 102:	ed e6       	ldi	r30, 0x6D	; 109
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	80 83       	st	Z, r24
	
	sei(); // Turn on interrupts
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <__vector_16>:
	}
	
	return 0;
}

EMPTY_INTERRUPT(ADC_vect);
 110:	18 95       	reti

00000112 <__vector_7>:
EMPTY_INTERRUPT(WDT_vect);
 112:	18 95       	reti

00000114 <__vector_5>:

ISR(PCINT2_vect) {
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f e4       	ldi	r24, 0x4F	; 79
 124:	93 ec       	ldi	r25, 0xC3	; 195
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <__vector_5+0x12>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_5+0x18>
 12c:	00 00       	nop
	_delay_ms(200);
}
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:
#include <util/delay.h>
#include <avr/sleep.h>
#include "setup.c"

int main (void) {
	setup();
 13c:	c8 df       	rcall	.-112    	; 0xce <setup>
		uint16_t batteryVoltageLevel = 0;
		for (uint8_t x = 0; x < 5; x++) {
			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
			_delay_ms(5);
		}
		batteryVoltageLevel = batteryVoltageLevel / 5;
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	e8 2e       	mov	r14, r24
 142:	f1 2c       	mov	r15, r1
int main (void) {
	setup();
	
	while(1) {
		// Power pin (PD4) low, go to sleep
		if (!(PIND & (1<<POWER_ON_PIN))) {
 144:	4c 99       	sbic	0x09, 4	; 9
 146:	31 c0       	rjmp	.+98     	; 0x1aa <main+0x6e>
 148:	8f e4       	ldi	r24, 0x4F	; 79
 14a:	93 ec       	ldi	r25, 0xC3	; 195
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x10>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x16>
 152:	00 00       	nop
			_delay_ms(200);
			
			// Turn off LEDs
			PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 71       	andi	r24, 0x10	; 16
 158:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8c 77       	andi	r24, 0x7C	; 124
 15e:	85 b9       	out	0x05, r24	; 5
			
			// Disable ADC/interrupt
			cbi(ADCSRA, ADEN);
 160:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 164:	8f 77       	andi	r24, 0x7F	; 127
 166:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
			cbi(ADCSRA, ADIE);
 16a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 16e:	87 7f       	andi	r24, 0xF7	; 247
 170:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
			
			// Enable pin change interrupt
			sbi(PCICR, PCIE2);
 174:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
			system_sleep();
 17e:	5d df       	rcall	.-326    	; 0x3a <system_sleep>
			
			// Enable ADC/interrupt
			sbi(ADCSRA, ADEN);
 180:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 184:	80 68       	ori	r24, 0x80	; 128
 186:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
			sbi(ADCSRA, ADIE);
 18a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
			
			// Disable pin change interrupt
			cbi(PCICR, PCIE2);
 194:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
 198:	8b 7f       	andi	r24, 0xFB	; 251
 19a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
 19e:	83 ec       	ldi	r24, 0xC3	; 195
 1a0:	99 e0       	ldi	r25, 0x09	; 9
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x66>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x6c>
 1a8:	00 00       	nop
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/sleep.h>
#include "setup.c"

int main (void) {
 1aa:	15 e0       	ldi	r17, 0x05	; 5
 1ac:	c0 e0       	ldi	r28, 0x00	; 0
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		// 5 samples over 25ms
		uint16_t batteryVoltageLevel = 0;
		for (uint8_t x = 0; x < 5; x++) {
			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	75 df       	rcall	.-278    	; 0xa0 <adc_read>
 1b6:	c8 0f       	add	r28, r24
 1b8:	d9 1f       	adc	r29, r25
 1ba:	81 ee       	ldi	r24, 0xE1	; 225
 1bc:	94 e0       	ldi	r25, 0x04	; 4
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x82>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x88>
 1c4:	00 00       	nop
 1c6:	11 50       	subi	r17, 0x01	; 1
		}
		
		
		// 5 samples over 25ms
		uint16_t batteryVoltageLevel = 0;
		for (uint8_t x = 0; x < 5; x++) {
 1c8:	99 f7       	brne	.-26     	; 0x1b0 <main+0x74>
			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
			_delay_ms(5);
		}
		batteryVoltageLevel = batteryVoltageLevel / 5;
 1ca:	ce 01       	movw	r24, r28
 1cc:	b7 01       	movw	r22, r14
 1ce:	4f d0       	rcall	.+158    	; 0x26e <__udivmodhi4>
		
		
		// Red
		if (batteryVoltageLevel >= 675) {
 1d0:	63 3a       	cpi	r22, 0xA3	; 163
 1d2:	92 e0       	ldi	r25, 0x02	; 2
 1d4:	79 07       	cpc	r23, r25
 1d6:	30 f0       	brcs	.+12     	; 0x1e4 <main+0xa8>
			PORTD |= (1<<LED1);
 1d8:	58 9a       	sbi	0x0b, 0	; 11
		}
		else {
			PORTD &= ~(1<<LED1);
		}
		if (batteryVoltageLevel >= 720) {
 1da:	60 3d       	cpi	r22, 0xD0	; 208
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	78 07       	cpc	r23, r24
 1e0:	18 f4       	brcc	.+6      	; 0x1e8 <main+0xac>
 1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <main+0xb8>
		// Red
		if (batteryVoltageLevel >= 675) {
			PORTD |= (1<<LED1);
		}
		else {
			PORTD &= ~(1<<LED1);
 1e4:	58 98       	cbi	0x0b, 0	; 11
 1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <main+0xb8>
		}
		if (batteryVoltageLevel >= 720) {
			PORTD |= (1<<LED2);
 1e8:	59 9a       	sbi	0x0b, 1	; 11
		}
		else {
			PORTD &= ~(1<<LED2);
		}
		if (batteryVoltageLevel >= 750) {
 1ea:	6e 3e       	cpi	r22, 0xEE	; 238
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	79 07       	cpc	r23, r25
 1f0:	18 f4       	brcc	.+6      	; 0x1f8 <main+0xbc>
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <__stack+0x5>
		}
		if (batteryVoltageLevel >= 720) {
			PORTD |= (1<<LED2);
		}
		else {
			PORTD &= ~(1<<LED2);
 1f4:	59 98       	cbi	0x0b, 1	; 11
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <__stack+0x5>
		}
		if (batteryVoltageLevel >= 750) {
			PORTD |= (1<<LED3);
 1f8:	5a 9a       	sbi	0x0b, 2	; 11
		else {
			PORTD &= ~(1<<LED3);
		}
		
		// Blue
		if (batteryVoltageLevel >= 825) {
 1fa:	69 33       	cpi	r22, 0x39	; 57
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	78 07       	cpc	r23, r24
 200:	18 f4       	brcc	.+6      	; 0x208 <__stack+0x9>
 202:	08 c0       	rjmp	.+16     	; 0x214 <__stack+0x15>
		}
		if (batteryVoltageLevel >= 750) {
			PORTD |= (1<<LED3);
		}
		else {
			PORTD &= ~(1<<LED3);
 204:	5a 98       	cbi	0x0b, 2	; 11
 206:	06 c0       	rjmp	.+12     	; 0x214 <__stack+0x15>
		}
		
		// Blue
		if (batteryVoltageLevel >= 825) {
			PORTD |= (1<<LED4);
 208:	5b 9a       	sbi	0x0b, 3	; 11
		}
		else {
			PORTD &= ~(1<<LED4);
		}
		if (batteryVoltageLevel >= 850) {
 20a:	62 35       	cpi	r22, 0x52	; 82
 20c:	93 e0       	ldi	r25, 0x03	; 3
 20e:	79 07       	cpc	r23, r25
 210:	18 f4       	brcc	.+6      	; 0x218 <__stack+0x19>
 212:	08 c0       	rjmp	.+16     	; 0x224 <__stack+0x25>
		// Blue
		if (batteryVoltageLevel >= 825) {
			PORTD |= (1<<LED4);
		}
		else {
			PORTD &= ~(1<<LED4);
 214:	5b 98       	cbi	0x0b, 3	; 11
 216:	06 c0       	rjmp	.+12     	; 0x224 <__stack+0x25>
		}
		if (batteryVoltageLevel >= 850) {
			PORTB |= (1<<LED5);
 218:	2f 9a       	sbi	0x05, 7	; 5
		}
		else {
			PORTB &= ~(1<<LED5);
		}
		if (batteryVoltageLevel >= 875) {
 21a:	6b 36       	cpi	r22, 0x6B	; 107
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	78 07       	cpc	r23, r24
 220:	18 f4       	brcc	.+6      	; 0x228 <__stack+0x29>
 222:	08 c0       	rjmp	.+16     	; 0x234 <__stack+0x35>
		}
		if (batteryVoltageLevel >= 850) {
			PORTB |= (1<<LED5);
		}
		else {
			PORTB &= ~(1<<LED5);
 224:	2f 98       	cbi	0x05, 7	; 5
 226:	06 c0       	rjmp	.+12     	; 0x234 <__stack+0x35>
		}
		if (batteryVoltageLevel >= 875) {
			PORTD |= (1<<LED6);
 228:	5d 9a       	sbi	0x0b, 5	; 11
		}
		else {
			PORTD &= ~(1<<LED6);
		}
		if (batteryVoltageLevel >= 890) {
 22a:	6a 37       	cpi	r22, 0x7A	; 122
 22c:	93 e0       	ldi	r25, 0x03	; 3
 22e:	79 07       	cpc	r23, r25
 230:	18 f4       	brcc	.+6      	; 0x238 <__stack+0x39>
 232:	08 c0       	rjmp	.+16     	; 0x244 <__stack+0x45>
		}
		if (batteryVoltageLevel >= 875) {
			PORTD |= (1<<LED6);
		}
		else {
			PORTD &= ~(1<<LED6);
 234:	5d 98       	cbi	0x0b, 5	; 11
 236:	06 c0       	rjmp	.+12     	; 0x244 <__stack+0x45>
		}
		if (batteryVoltageLevel >= 890) {
			PORTD |= (1<<LED7);
 238:	5e 9a       	sbi	0x0b, 6	; 11
		else {
			PORTD &= ~(1<<LED7);
		}
		
		// Green
		if (batteryVoltageLevel >= 910) {
 23a:	6e 38       	cpi	r22, 0x8E	; 142
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	78 07       	cpc	r23, r24
 240:	18 f4       	brcc	.+6      	; 0x248 <__stack+0x49>
 242:	08 c0       	rjmp	.+16     	; 0x254 <__stack+0x55>
		}
		if (batteryVoltageLevel >= 890) {
			PORTD |= (1<<LED7);
		}
		else {
			PORTD &= ~(1<<LED7);
 244:	5e 98       	cbi	0x0b, 6	; 11
 246:	06 c0       	rjmp	.+12     	; 0x254 <__stack+0x55>
		}
		
		// Green
		if (batteryVoltageLevel >= 910) {
			PORTD |= (1<<LED8);
 248:	5f 9a       	sbi	0x0b, 7	; 11
		}
		else {
			PORTD &= ~(1<<LED8);
		}
		if (batteryVoltageLevel >= 920) {
 24a:	68 39       	cpi	r22, 0x98	; 152
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	79 07       	cpc	r23, r25
 250:	18 f4       	brcc	.+6      	; 0x258 <__stack+0x59>
 252:	08 c0       	rjmp	.+16     	; 0x264 <__stack+0x65>
		// Green
		if (batteryVoltageLevel >= 910) {
			PORTD |= (1<<LED8);
		}
		else {
			PORTD &= ~(1<<LED8);
 254:	5f 98       	cbi	0x0b, 7	; 11
 256:	06 c0       	rjmp	.+12     	; 0x264 <__stack+0x65>
		}
		if (batteryVoltageLevel >= 920) {
			PORTB |= (1<<LED9);
 258:	28 9a       	sbi	0x05, 0	; 5
		}
		else {
			PORTB &= ~(1<<LED9);
		}
		if (batteryVoltageLevel >= 930) {
 25a:	62 3a       	cpi	r22, 0xA2	; 162
 25c:	73 40       	sbci	r23, 0x03	; 3
 25e:	18 f0       	brcs	.+6      	; 0x266 <__stack+0x67>
			PORTB |= (1<<LED10);
 260:	29 9a       	sbi	0x05, 1	; 5
 262:	02 c0       	rjmp	.+4      	; 0x268 <__stack+0x69>
		}
		if (batteryVoltageLevel >= 920) {
			PORTB |= (1<<LED9);
		}
		else {
			PORTB &= ~(1<<LED9);
 264:	28 98       	cbi	0x05, 0	; 5
		}
		if (batteryVoltageLevel >= 930) {
			PORTB |= (1<<LED10);
		}
		else {
			PORTB &= ~(1<<LED10);
 266:	29 98       	cbi	0x05, 1	; 5
		}
		
		// Sleep for 1 second
		watchdog_sleep(T1S);
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	17 df       	rcall	.-466    	; 0x9a <watchdog_sleep>
	}
 26c:	6b cf       	rjmp	.-298    	; 0x144 <main+0x8>

0000026e <__udivmodhi4>:
 26e:	aa 1b       	sub	r26, r26
 270:	bb 1b       	sub	r27, r27
 272:	51 e1       	ldi	r21, 0x11	; 17
 274:	07 c0       	rjmp	.+14     	; 0x284 <__udivmodhi4_ep>

00000276 <__udivmodhi4_loop>:
 276:	aa 1f       	adc	r26, r26
 278:	bb 1f       	adc	r27, r27
 27a:	a6 17       	cp	r26, r22
 27c:	b7 07       	cpc	r27, r23
 27e:	10 f0       	brcs	.+4      	; 0x284 <__udivmodhi4_ep>
 280:	a6 1b       	sub	r26, r22
 282:	b7 0b       	sbc	r27, r23

00000284 <__udivmodhi4_ep>:
 284:	88 1f       	adc	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	5a 95       	dec	r21
 28a:	a9 f7       	brne	.-22     	; 0x276 <__udivmodhi4_loop>
 28c:	80 95       	com	r24
 28e:	90 95       	com	r25
 290:	bc 01       	movw	r22, r24
 292:	cd 01       	movw	r24, r26
 294:	08 95       	ret

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
