   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	system_sleep
  12               	system_sleep:
  13               	.LFB6:
  14               		.file 1 "setup.c"
   1:setup.c       **** /*
   2:setup.c       ****  LiPo Battery Gauge
   3:setup.c       ****  Version: 1.2
   4:setup.c       ****  Author: Alex from insideGadgets (http://www.insidegadgets.com)
   5:setup.c       ****  Created: 13/10/2019
   6:setup.c       ****  Last Modified: 1/11/2019
   7:setup.c       **** 
   8:setup.c       ****  */
   9:setup.c       ****  
  10:setup.c       **** #ifndef cbi
  11:setup.c       **** #define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
  12:setup.c       **** #endif
  13:setup.c       **** #ifndef sbi
  14:setup.c       **** #define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
  15:setup.c       **** #endif
  16:setup.c       **** 
  17:setup.c       **** #ifndef NULL
  18:setup.c       **** #define NULL ((void *)0)
  19:setup.c       **** #endif
  20:setup.c       **** 
  21:setup.c       **** #define LOW 0
  22:setup.c       **** #define HIGH 1
  23:setup.c       **** #define false 0
  24:setup.c       **** #define true 1
  25:setup.c       **** 
  26:setup.c       **** // Watchdog timeouts to values
  27:setup.c       **** #define T16MS 0
  28:setup.c       **** #define T32MS 1
  29:setup.c       **** #define T64MS 2
  30:setup.c       **** #define T128MS 3
  31:setup.c       **** #define T250MS 4
  32:setup.c       **** #define T500MS 5
  33:setup.c       **** #define T1S 6
  34:setup.c       **** #define T2S 7
  35:setup.c       **** #define T4S 8
  36:setup.c       **** #define T8S 9
  37:setup.c       **** 
  38:setup.c       **** #define POWER_ON_PIN PD4
  39:setup.c       **** #define batteryADCPin 3
  40:setup.c       **** #define LED1 PD0
  41:setup.c       **** #define LED2 PD1
  42:setup.c       **** #define LED3 PD2
  43:setup.c       **** #define LED4 PD3
  44:setup.c       **** #define LED5 PB7
  45:setup.c       **** #define LED6 PD5
  46:setup.c       **** #define LED7 PD6
  47:setup.c       **** #define LED8 PD7
  48:setup.c       **** #define LED9 PB0
  49:setup.c       **** #define LED10 PB1
  50:setup.c       **** 
  51:setup.c       **** // ADC Refs
  52:setup.c       **** #define REF_1_1V 0
  53:setup.c       **** #define REF_AVCC 1
  54:setup.c       **** 
  55:setup.c       **** #define DELAY_TIME 50
  56:setup.c       **** 
  57:setup.c       **** // Sleep
  58:setup.c       **** void system_sleep(void) {
  15               		.loc 1 58 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  59:setup.c       **** 	set_sleep_mode(SLEEP_MODE_PWR_DOWN); // Set sleep mode
  21               		.loc 1 59 0
  22 0000 83B7      		in r24,0x33
  23 0002 897F      		andi r24,lo8(-7)
  24 0004 8460      		ori r24,lo8(4)
  25 0006 83BF      		out 0x33,r24
  60:setup.c       **** 	sleep_mode(); // System sleeps here
  26               		.loc 1 60 0
  27 0008 83B7      		in r24,0x33
  28 000a 8160      		ori r24,lo8(1)
  29 000c 83BF      		out 0x33,r24
  30               	/* #APP */
  31               	 ;  60 "setup.c" 1
  32 000e 8895      		sleep
  33               		
  34               	 ;  0 "" 2
  35               	/* #NOAPP */
  36 0010 83B7      		in r24,0x33
  37 0012 8E7F      		andi r24,lo8(-2)
  38 0014 83BF      		out 0x33,r24
  39 0016 0895      		ret
  40               		.cfi_endproc
  41               	.LFE6:
  43               	.global	setup_watchdog
  45               	setup_watchdog:
  46               	.LFB7:
  61:setup.c       **** }
  62:setup.c       **** 
  63:setup.c       **** // Setup watchdog timed sequence
  64:setup.c       **** void setup_watchdog(uint8_t wdDelay) {
  47               		.loc 1 64 0
  48               		.cfi_startproc
  49               	.LVL0:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  54 0018 8A30      		cpi r24,lo8(10)
  55 001a 00F0      		brlo .L3
  56 001c 89E0      		ldi r24,lo8(9)
  57               	.LVL1:
  58               	.L3:
  65:setup.c       **** 	if (wdDelay > 9) { 
  66:setup.c       **** 		wdDelay = 9;
  67:setup.c       **** 	}
  68:setup.c       **** 	
  69:setup.c       **** 	uint8_t bb = wdDelay & 7;
  59               		.loc 1 69 0
  60 001e 982F      		mov r25,r24
  61 0020 9770      		andi r25,lo8(7)
  62               	.LVL2:
  70:setup.c       **** 	if (wdDelay > 7) { 
  63               		.loc 1 70 0
  64 0022 8830      		cpi r24,lo8(8)
  65 0024 00F0      		brlo .L4
  71:setup.c       **** 		bb |= (1<<5);
  66               		.loc 1 71 0
  67 0026 9062      		ori r25,lo8(32)
  68               	.LVL3:
  69               	.L4:
  72:setup.c       **** 	}
  73:setup.c       **** 	
  74:setup.c       **** 	cli(); // Turn interrupts off
  70               		.loc 1 74 0
  71               	/* #APP */
  72               	 ;  74 "setup.c" 1
  73 0028 F894      		cli
  74               	 ;  0 "" 2
  75:setup.c       **** 	asm("WDR");
  75               		.loc 1 75 0
  76               	 ;  75 "setup.c" 1
  77 002a A895      		WDR
  78               	 ;  0 "" 2
  76:setup.c       **** 	
  77:setup.c       **** 	MCUSR &= ~(1<<WDRF);
  79               		.loc 1 77 0
  80               	/* #NOAPP */
  81 002c 84B7      		in r24,0x34
  82 002e 877F      		andi r24,lo8(-9)
  83 0030 84BF      		out 0x34,r24
  78:setup.c       **** 	// Start timed sequence
  79:setup.c       **** 	WDTCSR |= (1<<WDCE) | (1<<WDE);
  84               		.loc 1 79 0
  85 0032 8091 6000 		lds r24,96
  86 0036 8861      		ori r24,lo8(24)
  87 0038 8093 6000 		sts 96,r24
  80:setup.c       **** 	// Set new watchdog timeout value
  81:setup.c       **** 	WDTCSR = bb | (1<<WDIE);
  88               		.loc 1 81 0
  89 003c 9064      		ori r25,lo8(64)
  90               	.LVL4:
  91 003e 9093 6000 		sts 96,r25
  82:setup.c       **** 	
  83:setup.c       **** 	sei(); // Turn interrupts back on
  92               		.loc 1 83 0
  93               	/* #APP */
  94               	 ;  83 "setup.c" 1
  95 0042 7894      		sei
  96               	 ;  0 "" 2
  97               	/* #NOAPP */
  98 0044 0895      		ret
  99               		.cfi_endproc
 100               	.LFE7:
 102               	.global	turn_off_watchdog
 104               	turn_off_watchdog:
 105               	.LFB8:
  84:setup.c       **** }
  85:setup.c       **** 
  86:setup.c       **** // Turn off the Watchdog
  87:setup.c       **** void turn_off_watchdog(void) {
 106               		.loc 1 87 0
 107               		.cfi_startproc
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
  88:setup.c       **** 	cli(); // Turn interrupts off
 112               		.loc 1 88 0
 113               	/* #APP */
 114               	 ;  88 "setup.c" 1
 115 0046 F894      		cli
 116               	 ;  0 "" 2
  89:setup.c       **** 	asm("WDR");
 117               		.loc 1 89 0
 118               	 ;  89 "setup.c" 1
 119 0048 A895      		WDR
 120               	 ;  0 "" 2
  90:setup.c       **** 	MCUSR &= ~(1<<WDRF);
 121               		.loc 1 90 0
 122               	/* #NOAPP */
 123 004a 84B7      		in r24,0x34
 124 004c 877F      		andi r24,lo8(-9)
 125 004e 84BF      		out 0x34,r24
  91:setup.c       **** 	WDTCSR |= (1<<WDCE) | (1<<WDIE);
 126               		.loc 1 91 0
 127 0050 E0E6      		ldi r30,lo8(96)
 128 0052 F0E0      		ldi r31,0
 129 0054 8081      		ld r24,Z
 130 0056 8065      		ori r24,lo8(80)
 131 0058 8083      		st Z,r24
  92:setup.c       **** 	WDTCSR = 0;
 132               		.loc 1 92 0
 133 005a 1082      		st Z,__zero_reg__
  93:setup.c       **** 	sei(); // Turn interrupts back on
 134               		.loc 1 93 0
 135               	/* #APP */
 136               	 ;  93 "setup.c" 1
 137 005c 7894      		sei
 138               	 ;  0 "" 2
 139               	/* #NOAPP */
 140 005e 0895      		ret
 141               		.cfi_endproc
 142               	.LFE8:
 144               	.global	watchdog_sleep
 146               	watchdog_sleep:
 147               	.LFB9:
  94:setup.c       **** }
  95:setup.c       **** 
  96:setup.c       **** // Watchdog sleep function - setup, sleep and turn off
  97:setup.c       **** void watchdog_sleep(uint8_t timeout) { 
 148               		.loc 1 97 0
 149               		.cfi_startproc
 150               	.LVL5:
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 0 */
 154               	.L__stack_usage = 0
  98:setup.c       **** 	setup_watchdog(timeout);
 155               		.loc 1 98 0
 156 0060 00D0      		rcall setup_watchdog
 157               	.LVL6:
  99:setup.c       **** 	system_sleep();
 158               		.loc 1 99 0
 159 0062 00D0      		rcall system_sleep
 160               	.LVL7:
 100:setup.c       **** 	turn_off_watchdog();
 161               		.loc 1 100 0
 162 0064 00C0      		rjmp turn_off_watchdog
 163               	.LVL8:
 164               		.cfi_endproc
 165               	.LFE9:
 167               	.global	adc_read
 169               	adc_read:
 170               	.LFB10:
 101:setup.c       **** }
 102:setup.c       **** 
 103:setup.c       **** // Read the ADC
 104:setup.c       **** int adc_read(uint8_t pin, uint8_t reference) {
 171               		.loc 1 104 0
 172               		.cfi_startproc
 173               	.LVL9:
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
 178 0066 8F70      		andi r24,lo8(15)
 179               	.LVL10:
 105:setup.c       **** 	uint8_t low, high;
 106:setup.c       **** 	
 107:setup.c       **** 	// Set the analog reference (high two bits of ADMUX) and select the channel (low 4 bits)
 108:setup.c       **** 	if (reference == REF_1_1V) {
 180               		.loc 1 108 0
 181 0068 6111      		cpse r22,__zero_reg__
 109:setup.c       **** 		ADMUX = (pin & 0x0F); // 1.1V reference
 110:setup.c       **** 	}
 111:setup.c       **** 	else {
 112:setup.c       **** 		ADMUX = (1<<REFS0) | (pin & 0x0F); // AVCC Ref
 182               		.loc 1 112 0
 183 006a 8064      		ori r24,lo8(64)
 184               	.L11:
 185 006c 8093 7C00 		sts 124,r24
 113:setup.c       **** 	}
 114:setup.c       **** 	
 115:setup.c       **** 	set_sleep_mode(SLEEP_MODE_ADC); // Set sleep mode ADC
 186               		.loc 1 115 0
 187 0070 83B7      		in r24,0x33
 188 0072 897F      		andi r24,lo8(-7)
 189 0074 8260      		ori r24,lo8(2)
 190 0076 83BF      		out 0x33,r24
 116:setup.c       **** 	sleep_mode(); // System sleeps here
 191               		.loc 1 116 0
 192 0078 83B7      		in r24,0x33
 193 007a 8160      		ori r24,lo8(1)
 194 007c 83BF      		out 0x33,r24
 195               	/* #APP */
 196               	 ;  116 "setup.c" 1
 197 007e 8895      		sleep
 198               		
 199               	 ;  0 "" 2
 200               	/* #NOAPP */
 201 0080 83B7      		in r24,0x33
 202 0082 8E7F      		andi r24,lo8(-2)
 203 0084 83BF      		out 0x33,r24
 117:setup.c       **** 	
 118:setup.c       **** 	// Read ADCL first
 119:setup.c       **** 	low = ADCL;
 204               		.loc 1 119 0
 205 0086 8091 7800 		lds r24,120
 206               	.LVL11:
 120:setup.c       **** 	high = ADCH;
 207               		.loc 1 120 0
 208 008a 2091 7900 		lds r18,121
 209               	.LVL12:
 121:setup.c       **** 	
 122:setup.c       **** 	// combine the two bytes
 123:setup.c       **** 	return (high << 8) | low;
 210               		.loc 1 123 0
 211 008e 90E0      		ldi r25,0
 124:setup.c       **** }
 212               		.loc 1 124 0
 213 0090 922B      		or r25,r18
 214 0092 0895      		ret
 215               		.cfi_endproc
 216               	.LFE10:
 218               	.global	animate_leds
 220               	animate_leds:
 221               	.LFB11:
 125:setup.c       **** 
 126:setup.c       **** // Animate LEDs at start-up
 127:setup.c       **** void animate_leds(void) {
 222               		.loc 1 127 0
 223               		.cfi_startproc
 224 0094 1F93      		push r17
 225               	.LCFI0:
 226               		.cfi_def_cfa_offset 3
 227               		.cfi_offset 17, -2
 228 0096 CF93      		push r28
 229               	.LCFI1:
 230               		.cfi_def_cfa_offset 4
 231               		.cfi_offset 28, -3
 232 0098 DF93      		push r29
 233               	.LCFI2:
 234               		.cfi_def_cfa_offset 5
 235               		.cfi_offset 29, -4
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 3 */
 239               	.L__stack_usage = 3
 240               	.LVL13:
 241               	.LBB35:
 242               	.LBB36:
 243               		.file 2 "c:\\winavr-20100110\\avr\\include\\util\\delay.h"
   1:c:\winavr-20100110\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\winavr-20100110\avr\include\util\delay.h ****    All rights reserved.
   5:c:\winavr-20100110\avr\include\util\delay.h **** 
   6:c:\winavr-20100110\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\winavr-20100110\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\winavr-20100110\avr\include\util\delay.h **** 
   9:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\winavr-20100110\avr\include\util\delay.h **** 
  12:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\winavr-20100110\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\winavr-20100110\avr\include\util\delay.h ****      distribution.
  16:c:\winavr-20100110\avr\include\util\delay.h **** 
  17:c:\winavr-20100110\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\winavr-20100110\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\winavr-20100110\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\winavr-20100110\avr\include\util\delay.h **** 
  21:c:\winavr-20100110\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\winavr-20100110\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\winavr-20100110\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\winavr-20100110\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\winavr-20100110\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\winavr-20100110\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\winavr-20100110\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\winavr-20100110\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\winavr-20100110\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\winavr-20100110\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\winavr-20100110\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\winavr-20100110\avr\include\util\delay.h **** 
  33:c:\winavr-20100110\avr\include\util\delay.h **** /* $Id$ */
  34:c:\winavr-20100110\avr\include\util\delay.h **** 
  35:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\winavr-20100110\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\winavr-20100110\avr\include\util\delay.h **** 
  38:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\winavr-20100110\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\winavr-20100110\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\winavr-20100110\avr\include\util\delay.h **** #  endif
  42:c:\winavr-20100110\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\winavr-20100110\avr\include\util\delay.h **** 
  44:c:\winavr-20100110\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\winavr-20100110\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\winavr-20100110\avr\include\util\delay.h **** #include <math.h>
  47:c:\winavr-20100110\avr\include\util\delay.h **** 
  48:c:\winavr-20100110\avr\include\util\delay.h **** /** \file */
  49:c:\winavr-20100110\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\winavr-20100110\avr\include\util\delay.h ****     \code
  51:c:\winavr-20100110\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\winavr-20100110\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\winavr-20100110\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\winavr-20100110\avr\include\util\delay.h ****     \endcode
  55:c:\winavr-20100110\avr\include\util\delay.h **** 
  56:c:\winavr-20100110\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\winavr-20100110\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\winavr-20100110\avr\include\util\delay.h ****     used.
  60:c:\winavr-20100110\avr\include\util\delay.h **** 
  61:c:\winavr-20100110\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\winavr-20100110\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\winavr-20100110\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\winavr-20100110\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\winavr-20100110\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\winavr-20100110\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\winavr-20100110\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\winavr-20100110\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\winavr-20100110\avr\include\util\delay.h **** 
  70:c:\winavr-20100110\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\winavr-20100110\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\winavr-20100110\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\winavr-20100110\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\winavr-20100110\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\winavr-20100110\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\winavr-20100110\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\winavr-20100110\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\winavr-20100110\avr\include\util\delay.h **** 
  79:c:\winavr-20100110\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\winavr-20100110\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\winavr-20100110\avr\include\util\delay.h **** 
  83:c:\winavr-20100110\avr\include\util\delay.h **** */
  84:c:\winavr-20100110\avr\include\util\delay.h **** 
  85:c:\winavr-20100110\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\winavr-20100110\avr\include\util\delay.h **** #endif
  89:c:\winavr-20100110\avr\include\util\delay.h **** 
  90:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\winavr-20100110\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\winavr-20100110\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\winavr-20100110\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\winavr-20100110\avr\include\util\delay.h ****     \def F_CPU
  95:c:\winavr-20100110\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\winavr-20100110\avr\include\util\delay.h **** 
  97:c:\winavr-20100110\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\winavr-20100110\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\winavr-20100110\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\winavr-20100110\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\winavr-20100110\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\winavr-20100110\avr\include\util\delay.h **** 
 103:c:\winavr-20100110\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\winavr-20100110\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\winavr-20100110\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\winavr-20100110\avr\include\util\delay.h ****     integer value.
 107:c:\winavr-20100110\avr\include\util\delay.h ****  */
 108:c:\winavr-20100110\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 110:c:\winavr-20100110\avr\include\util\delay.h **** 
 111:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\winavr-20100110\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 114:c:\winavr-20100110\avr\include\util\delay.h **** 
 115:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\winavr-20100110\avr\include\util\delay.h **** #  include <math.h>
 119:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 120:c:\winavr-20100110\avr\include\util\delay.h **** 
 121:c:\winavr-20100110\avr\include\util\delay.h **** /**
 122:c:\winavr-20100110\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\winavr-20100110\avr\include\util\delay.h **** 
 124:c:\winavr-20100110\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\winavr-20100110\avr\include\util\delay.h **** 
 126:c:\winavr-20100110\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\winavr-20100110\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\winavr-20100110\avr\include\util\delay.h **** 
 129:c:\winavr-20100110\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\winavr-20100110\avr\include\util\delay.h **** 
 131:c:\winavr-20100110\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\winavr-20100110\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\winavr-20100110\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\winavr-20100110\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\winavr-20100110\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\winavr-20100110\avr\include\util\delay.h **** 
 137:c:\winavr-20100110\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\winavr-20100110\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\winavr-20100110\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\winavr-20100110\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\winavr-20100110\avr\include\util\delay.h **** 
 142:c:\winavr-20100110\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\winavr-20100110\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\winavr-20100110\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\winavr-20100110\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\winavr-20100110\avr\include\util\delay.h **** 
 147:c:\winavr-20100110\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\winavr-20100110\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\winavr-20100110\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\winavr-20100110\avr\include\util\delay.h ****    respectively.
 151:c:\winavr-20100110\avr\include\util\delay.h **** 
 152:c:\winavr-20100110\avr\include\util\delay.h ****    \note
 153:c:\winavr-20100110\avr\include\util\delay.h **** 
 154:c:\winavr-20100110\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\winavr-20100110\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\winavr-20100110\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\winavr-20100110\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\winavr-20100110\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\winavr-20100110\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\winavr-20100110\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\winavr-20100110\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\winavr-20100110\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\winavr-20100110\avr\include\util\delay.h **** 
 164:c:\winavr-20100110\avr\include\util\delay.h ****  */
 165:c:\winavr-20100110\avr\include\util\delay.h **** void
 166:c:\winavr-20100110\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\winavr-20100110\avr\include\util\delay.h **** {
 168:c:\winavr-20100110\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\winavr-20100110\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\winavr-20100110\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\winavr-20100110\avr\include\util\delay.h **** 
 176:c:\winavr-20100110\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\winavr-20100110\avr\include\util\delay.h **** 
 179:c:\winavr-20100110\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\winavr-20100110\avr\include\util\delay.h **** 
 182:c:\winavr-20100110\avr\include\util\delay.h **** 	#else
 183:c:\winavr-20100110\avr\include\util\delay.h **** 		//round up by default
 184:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\winavr-20100110\avr\include\util\delay.h **** 	#endif
 186:c:\winavr-20100110\avr\include\util\delay.h **** 
 187:c:\winavr-20100110\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 244               		.loc 2 187 0
 245 009a 87EA      		ldi r24,lo8(24999)
 246 009c 91E6      		ldi r25,hi8(24999)
 247 009e 0197      	1:	sbiw r24,1
 248 00a0 01F4      		brne 1b
 249 00a2 00C0      		rjmp .
 250 00a4 0000      		nop
 251               	.LVL14:
 252 00a6 15E0      		ldi r17,lo8(5)
 253               	.LBE36:
 254               	.LBE35:
 128:setup.c       **** 	_delay_ms(100);
 129:setup.c       **** 	
 130:setup.c       **** 	// 5 samples over 25ms
 131:setup.c       **** 	uint16_t batteryVoltageLevel = 0;
 255               		.loc 1 131 0
 256 00a8 C0E0      		ldi r28,0
 257 00aa D0E0      		ldi r29,0
 258               	.LVL15:
 259               	.L13:
 260               	.LBB37:
 132:setup.c       **** 	for (uint8_t x = 0; x < 5; x++) {
 133:setup.c       **** 		batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
 261               		.loc 1 133 0 discriminator 3
 262 00ac 60E0      		ldi r22,0
 263 00ae 83E0      		ldi r24,lo8(3)
 264 00b0 00D0      		rcall adc_read
 265               	.LVL16:
 266 00b2 C80F      		add r28,r24
 267 00b4 D91F      		adc r29,r25
 268               	.LVL17:
 269               	.LBB38:
 270               	.LBB39:
 271               		.loc 2 187 0 discriminator 3
 272 00b6 81EE      		ldi r24,lo8(1249)
 273 00b8 94E0      		ldi r25,hi8(1249)
 274 00ba 0197      	1:	sbiw r24,1
 275 00bc 01F4      		brne 1b
 276 00be 00C0      		rjmp .
 277 00c0 0000      		nop
 278               	.LVL18:
 279 00c2 1150      		subi r17,lo8(-(-1))
 280               	.LVL19:
 281               	.LBE39:
 282               	.LBE38:
 132:setup.c       **** 	for (uint8_t x = 0; x < 5; x++) {
 283               		.loc 1 132 0 discriminator 3
 284 00c4 01F4      		brne .L13
 285               	.LBE37:
 134:setup.c       **** 		_delay_ms(5);
 135:setup.c       **** 	}
 136:setup.c       **** 	batteryVoltageLevel = batteryVoltageLevel / 5;
 286               		.loc 1 136 0
 287 00c6 CE01      		movw r24,r28
 288 00c8 65E0      		ldi r22,lo8(5)
 289 00ca 70E0      		ldi r23,0
 290 00cc 00D0      		rcall __udivmodhi4
 291               	.LVL20:
 137:setup.c       **** 	
 138:setup.c       **** 	// Red
 139:setup.c       **** 	if (batteryVoltageLevel >= 675) {
 292               		.loc 1 139 0
 293 00ce 633A      		cpi r22,-93
 294 00d0 92E0      		ldi r25,2
 295 00d2 7907      		cpc r23,r25
 296 00d4 00F4      		brsh .+2
 297 00d6 00C0      		rjmp .L12
 140:setup.c       **** 		PORTD |= (1<<LED1);
 298               		.loc 1 140 0
 299 00d8 589A      		sbi 0xb,0
 300               	.LVL21:
 301               	.LBB40:
 302               	.LBB41:
 303               		.loc 2 187 0
 304 00da 83ED      		ldi r24,lo8(12499)
 305 00dc 90E3      		ldi r25,hi8(12499)
 306 00de 0197      	1:	sbiw r24,1
 307 00e0 01F4      		brne 1b
 308 00e2 00C0      		rjmp .
 309 00e4 0000      		nop
 310               	.LBE41:
 311               	.LBE40:
 141:setup.c       **** 		_delay_ms(DELAY_TIME);
 142:setup.c       **** 	}
 143:setup.c       **** 	if (batteryVoltageLevel >= 720) {
 312               		.loc 1 143 0
 313 00e6 603D      		cpi r22,-48
 314 00e8 92E0      		ldi r25,2
 315 00ea 7907      		cpc r23,r25
 316 00ec 00F4      		brsh .+2
 317 00ee 00C0      		rjmp .L12
 144:setup.c       **** 		PORTD |= (1<<LED2);
 318               		.loc 1 144 0
 319 00f0 599A      		sbi 0xb,1
 320               	.LVL22:
 321               	.LBB42:
 322               	.LBB43:
 323               		.loc 2 187 0
 324 00f2 83ED      		ldi r24,lo8(12499)
 325 00f4 90E3      		ldi r25,hi8(12499)
 326 00f6 0197      	1:	sbiw r24,1
 327 00f8 01F4      		brne 1b
 328 00fa 00C0      		rjmp .
 329 00fc 0000      		nop
 330               	.LBE43:
 331               	.LBE42:
 145:setup.c       **** 		_delay_ms(DELAY_TIME);
 146:setup.c       **** 	}
 147:setup.c       **** 	if (batteryVoltageLevel >= 750) {
 332               		.loc 1 147 0
 333 00fe 6E3E      		cpi r22,-18
 334 0100 92E0      		ldi r25,2
 335 0102 7907      		cpc r23,r25
 336 0104 00F4      		brsh .+2
 337 0106 00C0      		rjmp .L12
 148:setup.c       **** 		PORTD |= (1<<LED3);
 338               		.loc 1 148 0
 339 0108 5A9A      		sbi 0xb,2
 340               	.LVL23:
 341               	.LBB44:
 342               	.LBB45:
 343               		.loc 2 187 0
 344 010a 83ED      		ldi r24,lo8(12499)
 345 010c 90E3      		ldi r25,hi8(12499)
 346 010e 0197      	1:	sbiw r24,1
 347 0110 01F4      		brne 1b
 348 0112 00C0      		rjmp .
 349 0114 0000      		nop
 350               	.LBE45:
 351               	.LBE44:
 149:setup.c       **** 		_delay_ms(DELAY_TIME);
 150:setup.c       **** 	}
 151:setup.c       **** 	
 152:setup.c       **** 	// Blue
 153:setup.c       **** 	if (batteryVoltageLevel >= 825) {
 352               		.loc 1 153 0
 353 0116 6933      		cpi r22,57
 354 0118 93E0      		ldi r25,3
 355 011a 7907      		cpc r23,r25
 356 011c 00F4      		brsh .+2
 357 011e 00C0      		rjmp .L12
 154:setup.c       **** 		PORTD |= (1<<LED4);
 358               		.loc 1 154 0
 359 0120 5B9A      		sbi 0xb,3
 360               	.LVL24:
 361               	.LBB46:
 362               	.LBB47:
 363               		.loc 2 187 0
 364 0122 83ED      		ldi r24,lo8(12499)
 365 0124 90E3      		ldi r25,hi8(12499)
 366 0126 0197      	1:	sbiw r24,1
 367 0128 01F4      		brne 1b
 368 012a 00C0      		rjmp .
 369 012c 0000      		nop
 370               	.LBE47:
 371               	.LBE46:
 155:setup.c       **** 		_delay_ms(DELAY_TIME);
 156:setup.c       **** 	}
 157:setup.c       **** 	if (batteryVoltageLevel >= 850) {
 372               		.loc 1 157 0
 373 012e 6235      		cpi r22,82
 374 0130 93E0      		ldi r25,3
 375 0132 7907      		cpc r23,r25
 376 0134 00F0      		brlo .L12
 158:setup.c       **** 		PORTB |= (1<<LED5);
 377               		.loc 1 158 0
 378 0136 2F9A      		sbi 0x5,7
 379               	.LVL25:
 380               	.LBB48:
 381               	.LBB49:
 382               		.loc 2 187 0
 383 0138 83ED      		ldi r24,lo8(12499)
 384 013a 90E3      		ldi r25,hi8(12499)
 385 013c 0197      	1:	sbiw r24,1
 386 013e 01F4      		brne 1b
 387 0140 00C0      		rjmp .
 388 0142 0000      		nop
 389               	.LBE49:
 390               	.LBE48:
 159:setup.c       **** 		_delay_ms(DELAY_TIME);
 160:setup.c       **** 	}
 161:setup.c       **** 	if (batteryVoltageLevel >= 875) {
 391               		.loc 1 161 0
 392 0144 6B36      		cpi r22,107
 393 0146 93E0      		ldi r25,3
 394 0148 7907      		cpc r23,r25
 395 014a 00F0      		brlo .L12
 162:setup.c       **** 		PORTD |= (1<<LED6);
 396               		.loc 1 162 0
 397 014c 5D9A      		sbi 0xb,5
 398               	.LVL26:
 399               	.LBB50:
 400               	.LBB51:
 401               		.loc 2 187 0
 402 014e 83ED      		ldi r24,lo8(12499)
 403 0150 90E3      		ldi r25,hi8(12499)
 404 0152 0197      	1:	sbiw r24,1
 405 0154 01F4      		brne 1b
 406 0156 00C0      		rjmp .
 407 0158 0000      		nop
 408               	.LBE51:
 409               	.LBE50:
 163:setup.c       **** 		_delay_ms(DELAY_TIME);
 164:setup.c       **** 	}
 165:setup.c       **** 	if (batteryVoltageLevel >= 890) {
 410               		.loc 1 165 0
 411 015a 6A37      		cpi r22,122
 412 015c 93E0      		ldi r25,3
 413 015e 7907      		cpc r23,r25
 414 0160 00F0      		brlo .L12
 166:setup.c       **** 		PORTD |= (1<<LED7);
 415               		.loc 1 166 0
 416 0162 5E9A      		sbi 0xb,6
 417               	.LVL27:
 418               	.LBB52:
 419               	.LBB53:
 420               		.loc 2 187 0
 421 0164 83ED      		ldi r24,lo8(12499)
 422 0166 90E3      		ldi r25,hi8(12499)
 423 0168 0197      	1:	sbiw r24,1
 424 016a 01F4      		brne 1b
 425 016c 00C0      		rjmp .
 426 016e 0000      		nop
 427               	.LBE53:
 428               	.LBE52:
 167:setup.c       **** 		_delay_ms(DELAY_TIME);
 168:setup.c       **** 	}
 169:setup.c       **** 	
 170:setup.c       **** 	// Green
 171:setup.c       **** 	if (batteryVoltageLevel >= 910) {
 429               		.loc 1 171 0
 430 0170 6E38      		cpi r22,-114
 431 0172 93E0      		ldi r25,3
 432 0174 7907      		cpc r23,r25
 433 0176 00F0      		brlo .L12
 172:setup.c       **** 		PORTD |= (1<<LED8);
 434               		.loc 1 172 0
 435 0178 5F9A      		sbi 0xb,7
 436               	.LVL28:
 437               	.LBB54:
 438               	.LBB55:
 439               		.loc 2 187 0
 440 017a 83ED      		ldi r24,lo8(12499)
 441 017c 90E3      		ldi r25,hi8(12499)
 442 017e 0197      	1:	sbiw r24,1
 443 0180 01F4      		brne 1b
 444 0182 00C0      		rjmp .
 445 0184 0000      		nop
 446               	.LBE55:
 447               	.LBE54:
 173:setup.c       **** 		_delay_ms(DELAY_TIME);
 174:setup.c       **** 	}
 175:setup.c       **** 	if (batteryVoltageLevel >= 920) {
 448               		.loc 1 175 0
 449 0186 6839      		cpi r22,-104
 450 0188 93E0      		ldi r25,3
 451 018a 7907      		cpc r23,r25
 452 018c 00F0      		brlo .L12
 176:setup.c       **** 		PORTB |= (1<<LED9);
 453               		.loc 1 176 0
 454 018e 289A      		sbi 0x5,0
 455               	.LVL29:
 456               	.LBB56:
 457               	.LBB57:
 458               		.loc 2 187 0
 459 0190 83ED      		ldi r24,lo8(12499)
 460 0192 90E3      		ldi r25,hi8(12499)
 461 0194 0197      	1:	sbiw r24,1
 462 0196 01F4      		brne 1b
 463 0198 00C0      		rjmp .
 464 019a 0000      		nop
 465               	.LBE57:
 466               	.LBE56:
 177:setup.c       **** 		_delay_ms(DELAY_TIME);
 178:setup.c       **** 	}
 179:setup.c       **** 	if (batteryVoltageLevel >= 930) {
 467               		.loc 1 179 0
 468 019c 623A      		cpi r22,-94
 469 019e 7340      		sbci r23,3
 470 01a0 00F0      		brlo .L12
 180:setup.c       **** 		PORTB |= (1<<LED10);
 471               		.loc 1 180 0
 472 01a2 299A      		sbi 0x5,1
 473               	.LVL30:
 474               	.L12:
 475               	/* epilogue start */
 181:setup.c       **** 	}
 182:setup.c       **** }
 476               		.loc 1 182 0
 477 01a4 DF91      		pop r29
 478 01a6 CF91      		pop r28
 479 01a8 1F91      		pop r17
 480               	.LVL31:
 481 01aa 0895      		ret
 482               		.cfi_endproc
 483               	.LFE11:
 485               	.global	setup
 487               	setup:
 488               	.LFB12:
 183:setup.c       **** 
 184:setup.c       **** // Setup
 185:setup.c       **** void setup(void) {
 489               		.loc 1 185 0
 490               		.cfi_startproc
 491               	/* prologue: function */
 492               	/* frame size = 0 */
 493               	/* stack size = 0 */
 494               	.L__stack_usage = 0
 186:setup.c       **** 	// Turn on pull ups
 187:setup.c       **** 	PORTB |= (1<<PB2) | (1<<PB3) | (1<<PB4) | (1<<PB5) | (1<<PB6); 
 495               		.loc 1 187 0
 496 01ac 85B1      		in r24,0x5
 497 01ae 8C67      		ori r24,lo8(124)
 498 01b0 85B9      		out 0x5,r24
 188:setup.c       **** 	PORTC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC4) | (1<<PC5) | (1<<PC6) | (1<<PC7); 
 499               		.loc 1 188 0
 500 01b2 88B1      		in r24,0x8
 501 01b4 876F      		ori r24,lo8(-9)
 502 01b6 88B9      		out 0x8,r24
 189:setup.c       **** 	
 190:setup.c       **** 	// Setup outputs
 191:setup.c       **** 	DDRD |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8);
 503               		.loc 1 191 0
 504 01b8 8AB1      		in r24,0xa
 505 01ba 8F6E      		ori r24,lo8(-17)
 506 01bc 8AB9      		out 0xa,r24
 192:setup.c       **** 	DDRB |= (1<<LED5)  | (1<<LED9) | (1<<LED10);
 507               		.loc 1 192 0
 508 01be 84B1      		in r24,0x4
 509 01c0 8368      		ori r24,lo8(-125)
 510 01c2 84B9      		out 0x4,r24
 193:setup.c       **** 	
 194:setup.c       **** 	// Blink LEDs
 195:setup.c       **** 	//PORTD |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8);
 196:setup.c       **** 	//PORTB |= (1<<LED5) | (1<<LED9) | (1<<LED10);
 197:setup.c       **** 	//_delay_ms(200);
 198:setup.c       **** 	//PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
 199:setup.c       **** 	//PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
 200:setup.c       **** 	
 201:setup.c       **** 	// Set ADC prescale factor to 8
 202:setup.c       **** 	// 1 MHz / 8 = 125 KHz, inside the desired 50-200 KHz range.
 203:setup.c       **** 	sbi(ADCSRA, ADPS1);
 511               		.loc 1 203 0
 512 01c4 EAE7      		ldi r30,lo8(122)
 513 01c6 F0E0      		ldi r31,0
 514 01c8 8081      		ld r24,Z
 515 01ca 8260      		ori r24,lo8(2)
 516 01cc 8083      		st Z,r24
 204:setup.c       **** 	sbi(ADCSRA, ADPS0);
 517               		.loc 1 204 0
 518 01ce 8081      		ld r24,Z
 519 01d0 8160      		ori r24,lo8(1)
 520 01d2 8083      		st Z,r24
 205:setup.c       **** 	
 206:setup.c       **** 	// Enable ADC/interrupt
 207:setup.c       **** 	sbi(ADCSRA, ADEN);
 521               		.loc 1 207 0
 522 01d4 8081      		ld r24,Z
 523 01d6 8068      		ori r24,lo8(-128)
 524 01d8 8083      		st Z,r24
 208:setup.c       **** 	sbi(ADCSRA, ADIE);
 525               		.loc 1 208 0
 526 01da 8081      		ld r24,Z
 527 01dc 8860      		ori r24,lo8(8)
 528 01de 8083      		st Z,r24
 209:setup.c       **** 	
 210:setup.c       **** 	// Enable pin change interrupt on PD4
 211:setup.c       **** 	sbi(PCMSK2, PCINT20);
 529               		.loc 1 211 0
 530 01e0 EDE6      		ldi r30,lo8(109)
 531 01e2 F0E0      		ldi r31,0
 532 01e4 8081      		ld r24,Z
 533 01e6 8061      		ori r24,lo8(16)
 534 01e8 8083      		st Z,r24
 212:setup.c       **** 	
 213:setup.c       **** 	sei(); // Turn on interrupts
 535               		.loc 1 213 0
 536               	/* #APP */
 537               	 ;  213 "setup.c" 1
 538 01ea 7894      		sei
 539               	 ;  0 "" 2
 540               	/* #NOAPP */
 541 01ec 0895      		ret
 542               		.cfi_endproc
 543               	.LFE12:
 545               		.section	.text.startup,"ax",@progbits
 546               	.global	main
 548               	main:
 549               	.LFB13:
 550               		.file 3 "main.c"
   1:main.c        **** /*
   2:main.c        ****  LiPo Battery Gauge
   3:main.c        ****  Version: 1.2
   4:main.c        ****  Author: Alex from insideGadgets (http://www.insidegadgets.com)
   5:main.c        ****  Created: 13/10/2019
   6:main.c        ****  Last Modified: 1/11/2019
   7:main.c        ****  
   8:main.c        **** */
   9:main.c        **** 
  10:main.c        **** #define F_CPU 1000000 // 1 MHz
  11:main.c        **** 
  12:main.c        **** #include <avr/io.h>
  13:main.c        **** #include <avr/eeprom.h>
  14:main.c        **** #include <avr/interrupt.h>
  15:main.c        **** #include <util/delay.h>
  16:main.c        **** #include <avr/sleep.h>
  17:main.c        **** #include "setup.c"
  18:main.c        **** 
  19:main.c        **** int main (void) {
 551               		.loc 3 19 0
 552               		.cfi_startproc
 553               	/* prologue: function */
 554               	/* frame size = 0 */
 555               	/* stack size = 0 */
 556               	.L__stack_usage = 0
  20:main.c        **** 	setup();
 557               		.loc 3 20 0
 558 0000 00D0      		rcall setup
 559               	.LVL32:
 560               	.LBB58:
  21:main.c        **** 	
  22:main.c        **** 	while(1) {
  23:main.c        **** 		// Power pin (PD4) low, go to sleep
  24:main.c        **** 		if (!(PIND & (1<<POWER_ON_PIN))) {
  25:main.c        **** 			_delay_ms(200);
  26:main.c        **** 			
  27:main.c        **** 			// Turn off LEDs
  28:main.c        **** 			PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
  29:main.c        **** 			PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
  30:main.c        **** 			
  31:main.c        **** 			// Disable ADC/interrupt
  32:main.c        **** 			cbi(ADCSRA, ADEN);
  33:main.c        **** 			cbi(ADCSRA, ADIE);
  34:main.c        **** 			
  35:main.c        **** 			// Enable pin change interrupt
  36:main.c        **** 			sbi(PCICR, PCIE2);
  37:main.c        **** 			system_sleep();
  38:main.c        **** 			
  39:main.c        **** 			// Enable ADC/interrupt
  40:main.c        **** 			sbi(ADCSRA, ADEN);
  41:main.c        **** 			sbi(ADCSRA, ADIE);
  42:main.c        **** 			
  43:main.c        **** 			// Disable pin change interrupt
  44:main.c        **** 			cbi(PCICR, PCIE2);
  45:main.c        **** 			_delay_ms(100);
  46:main.c        **** 			
  47:main.c        **** 			animate_leds(); // Animate LEDs at start
  48:main.c        **** 		}
  49:main.c        **** 		
  50:main.c        **** 		
  51:main.c        **** 		// 5 samples over 25ms
  52:main.c        **** 		uint16_t batteryVoltageLevel = 0;
  53:main.c        **** 		for (uint8_t x = 0; x < 5; x++) {
  54:main.c        **** 			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
  55:main.c        **** 			_delay_ms(5);
  56:main.c        **** 		}
  57:main.c        **** 		batteryVoltageLevel = batteryVoltageLevel / 5;
 561               		.loc 3 57 0
 562 0002 85E0      		ldi r24,lo8(5)
 563 0004 E82E      		mov r14,r24
 564 0006 F12C      		mov r15,__zero_reg__
 565               	.L49:
  24:main.c        **** 			_delay_ms(200);
 566               		.loc 3 24 0
 567 0008 4C99      		sbic 0x9,4
 568 000a 00C0      		rjmp .L27
 569               	.LVL33:
 570               	.LBB59:
 571               	.LBB60:
 572               		.loc 2 187 0
 573 000c 8FE4      		ldi r24,lo8(-15537)
 574 000e 93EC      		ldi r25,hi8(-15537)
 575 0010 0197      	1:	sbiw r24,1
 576 0012 01F4      		brne 1b
 577 0014 00C0      		rjmp .
 578 0016 0000      		nop
 579               	.LVL34:
 580               	.LBE60:
 581               	.LBE59:
  28:main.c        **** 			PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
 582               		.loc 3 28 0
 583 0018 8BB1      		in r24,0xb
 584 001a 8071      		andi r24,lo8(16)
 585 001c 8BB9      		out 0xb,r24
  29:main.c        **** 			
 586               		.loc 3 29 0
 587 001e 85B1      		in r24,0x5
 588 0020 8C77      		andi r24,lo8(124)
 589 0022 85B9      		out 0x5,r24
  32:main.c        **** 			cbi(ADCSRA, ADIE);
 590               		.loc 3 32 0
 591 0024 8091 7A00 		lds r24,122
 592 0028 8F77      		andi r24,lo8(127)
 593 002a 8093 7A00 		sts 122,r24
  33:main.c        **** 			
 594               		.loc 3 33 0
 595 002e 8091 7A00 		lds r24,122
 596 0032 877F      		andi r24,lo8(-9)
 597 0034 8093 7A00 		sts 122,r24
  36:main.c        **** 			system_sleep();
 598               		.loc 3 36 0
 599 0038 8091 6800 		lds r24,104
 600 003c 8460      		ori r24,lo8(4)
 601 003e 8093 6800 		sts 104,r24
  37:main.c        **** 			
 602               		.loc 3 37 0
 603 0042 00D0      		rcall system_sleep
 604               	.LVL35:
  40:main.c        **** 			sbi(ADCSRA, ADIE);
 605               		.loc 3 40 0
 606 0044 8091 7A00 		lds r24,122
 607 0048 8068      		ori r24,lo8(-128)
 608 004a 8093 7A00 		sts 122,r24
  41:main.c        **** 			
 609               		.loc 3 41 0
 610 004e 8091 7A00 		lds r24,122
 611 0052 8860      		ori r24,lo8(8)
 612 0054 8093 7A00 		sts 122,r24
  44:main.c        **** 			_delay_ms(100);
 613               		.loc 3 44 0
 614 0058 8091 6800 		lds r24,104
 615 005c 8B7F      		andi r24,lo8(-5)
 616 005e 8093 6800 		sts 104,r24
 617               	.LVL36:
 618               	.LBB61:
 619               	.LBB62:
 620               		.loc 2 187 0
 621 0062 87EA      		ldi r24,lo8(24999)
 622 0064 91E6      		ldi r25,hi8(24999)
 623 0066 0197      	1:	sbiw r24,1
 624 0068 01F4      		brne 1b
 625 006a 00C0      		rjmp .
 626 006c 0000      		nop
 627               	.LVL37:
 628               	.LBE62:
 629               	.LBE61:
  47:main.c        **** 		}
 630               		.loc 3 47 0
 631 006e 00D0      		rcall animate_leds
 632               	.LVL38:
 633               	.L27:
 634               	.LBE58:
  19:main.c        **** 	setup();
 635               		.loc 3 19 0 discriminator 1
 636 0070 15E0      		ldi r17,lo8(5)
 637 0072 C0E0      		ldi r28,0
 638 0074 D0E0      		ldi r29,0
 639               	.LVL39:
 640               	.L28:
 641               	.LBB66:
 642               	.LBB63:
  54:main.c        **** 			_delay_ms(5);
 643               		.loc 3 54 0 discriminator 3
 644 0076 60E0      		ldi r22,0
 645 0078 83E0      		ldi r24,lo8(3)
 646 007a 00D0      		rcall adc_read
 647               	.LVL40:
 648 007c C80F      		add r28,r24
 649 007e D91F      		adc r29,r25
 650               	.LVL41:
 651               	.LBB64:
 652               	.LBB65:
 653               		.loc 2 187 0 discriminator 3
 654 0080 81EE      		ldi r24,lo8(1249)
 655 0082 94E0      		ldi r25,hi8(1249)
 656 0084 0197      	1:	sbiw r24,1
 657 0086 01F4      		brne 1b
 658 0088 00C0      		rjmp .
 659 008a 0000      		nop
 660               	.LVL42:
 661 008c 1150      		subi r17,lo8(-(-1))
 662               	.LVL43:
 663               	.LBE65:
 664               	.LBE64:
  53:main.c        **** 			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
 665               		.loc 3 53 0 discriminator 3
 666 008e 01F4      		brne .L28
 667               	.LBE63:
 668               		.loc 3 57 0
 669 0090 CE01      		movw r24,r28
 670 0092 B701      		movw r22,r14
 671 0094 00D0      		rcall __udivmodhi4
 672               	.LVL44:
  58:main.c        **** 		
  59:main.c        **** 		
  60:main.c        **** 		// Red
  61:main.c        **** 		if (batteryVoltageLevel >= 675) {
 673               		.loc 3 61 0
 674 0096 633A      		cpi r22,-93
 675 0098 92E0      		ldi r25,2
 676 009a 7907      		cpc r23,r25
 677 009c 00F0      		brlo .L29
  62:main.c        **** 			PORTD |= (1<<LED1);
 678               		.loc 3 62 0
 679 009e 589A      		sbi 0xb,0
  63:main.c        **** 		}
  64:main.c        **** 		else {
  65:main.c        **** 			PORTD &= ~(1<<LED1);
  66:main.c        **** 		}
  67:main.c        **** 		if (batteryVoltageLevel >= 720) {
 680               		.loc 3 67 0
 681 00a0 603D      		cpi r22,-48
 682 00a2 82E0      		ldi r24,2
 683 00a4 7807      		cpc r23,r24
 684 00a6 00F4      		brsh .L30
 685 00a8 00C0      		rjmp .L31
 686               	.L29:
  65:main.c        **** 		}
 687               		.loc 3 65 0
 688 00aa 5898      		cbi 0xb,0
 689 00ac 00C0      		rjmp .L31
 690               	.L30:
  68:main.c        **** 			PORTD |= (1<<LED2);
 691               		.loc 3 68 0
 692 00ae 599A      		sbi 0xb,1
  69:main.c        **** 		}
  70:main.c        **** 		else {
  71:main.c        **** 			PORTD &= ~(1<<LED2);
  72:main.c        **** 		}
  73:main.c        **** 		if (batteryVoltageLevel >= 750) {
 693               		.loc 3 73 0
 694 00b0 6E3E      		cpi r22,-18
 695 00b2 92E0      		ldi r25,2
 696 00b4 7907      		cpc r23,r25
 697 00b6 00F4      		brsh .L32
 698 00b8 00C0      		rjmp .L33
 699               	.L31:
  71:main.c        **** 		}
 700               		.loc 3 71 0
 701 00ba 5998      		cbi 0xb,1
 702 00bc 00C0      		rjmp .L33
 703               	.L32:
  74:main.c        **** 			PORTD |= (1<<LED3);
 704               		.loc 3 74 0
 705 00be 5A9A      		sbi 0xb,2
  75:main.c        **** 		}
  76:main.c        **** 		else {
  77:main.c        **** 			PORTD &= ~(1<<LED3);
  78:main.c        **** 		}
  79:main.c        **** 		
  80:main.c        **** 		// Blue
  81:main.c        **** 		if (batteryVoltageLevel >= 825) {
 706               		.loc 3 81 0
 707 00c0 6933      		cpi r22,57
 708 00c2 83E0      		ldi r24,3
 709 00c4 7807      		cpc r23,r24
 710 00c6 00F4      		brsh .L34
 711 00c8 00C0      		rjmp .L35
 712               	.L33:
  77:main.c        **** 		}
 713               		.loc 3 77 0
 714 00ca 5A98      		cbi 0xb,2
 715 00cc 00C0      		rjmp .L35
 716               	.L34:
  82:main.c        **** 			PORTD |= (1<<LED4);
 717               		.loc 3 82 0
 718 00ce 5B9A      		sbi 0xb,3
  83:main.c        **** 		}
  84:main.c        **** 		else {
  85:main.c        **** 			PORTD &= ~(1<<LED4);
  86:main.c        **** 		}
  87:main.c        **** 		if (batteryVoltageLevel >= 850) {
 719               		.loc 3 87 0
 720 00d0 6235      		cpi r22,82
 721 00d2 93E0      		ldi r25,3
 722 00d4 7907      		cpc r23,r25
 723 00d6 00F4      		brsh .L36
 724 00d8 00C0      		rjmp .L37
 725               	.L35:
  85:main.c        **** 		}
 726               		.loc 3 85 0
 727 00da 5B98      		cbi 0xb,3
 728 00dc 00C0      		rjmp .L37
 729               	.L36:
  88:main.c        **** 			PORTB |= (1<<LED5);
 730               		.loc 3 88 0
 731 00de 2F9A      		sbi 0x5,7
  89:main.c        **** 		}
  90:main.c        **** 		else {
  91:main.c        **** 			PORTB &= ~(1<<LED5);
  92:main.c        **** 		}
  93:main.c        **** 		if (batteryVoltageLevel >= 875) {
 732               		.loc 3 93 0
 733 00e0 6B36      		cpi r22,107
 734 00e2 83E0      		ldi r24,3
 735 00e4 7807      		cpc r23,r24
 736 00e6 00F4      		brsh .L38
 737 00e8 00C0      		rjmp .L39
 738               	.L37:
  91:main.c        **** 		}
 739               		.loc 3 91 0
 740 00ea 2F98      		cbi 0x5,7
 741 00ec 00C0      		rjmp .L39
 742               	.L38:
  94:main.c        **** 			PORTD |= (1<<LED6);
 743               		.loc 3 94 0
 744 00ee 5D9A      		sbi 0xb,5
  95:main.c        **** 		}
  96:main.c        **** 		else {
  97:main.c        **** 			PORTD &= ~(1<<LED6);
  98:main.c        **** 		}
  99:main.c        **** 		if (batteryVoltageLevel >= 890) {
 745               		.loc 3 99 0
 746 00f0 6A37      		cpi r22,122
 747 00f2 93E0      		ldi r25,3
 748 00f4 7907      		cpc r23,r25
 749 00f6 00F4      		brsh .L40
 750 00f8 00C0      		rjmp .L41
 751               	.L39:
  97:main.c        **** 		}
 752               		.loc 3 97 0
 753 00fa 5D98      		cbi 0xb,5
 754 00fc 00C0      		rjmp .L41
 755               	.L40:
 100:main.c        **** 			PORTD |= (1<<LED7);
 756               		.loc 3 100 0
 757 00fe 5E9A      		sbi 0xb,6
 101:main.c        **** 		}
 102:main.c        **** 		else {
 103:main.c        **** 			PORTD &= ~(1<<LED7);
 104:main.c        **** 		}
 105:main.c        **** 		
 106:main.c        **** 		// Green
 107:main.c        **** 		if (batteryVoltageLevel >= 910) {
 758               		.loc 3 107 0
 759 0100 6E38      		cpi r22,-114
 760 0102 83E0      		ldi r24,3
 761 0104 7807      		cpc r23,r24
 762 0106 00F4      		brsh .L42
 763 0108 00C0      		rjmp .L43
 764               	.L41:
 103:main.c        **** 		}
 765               		.loc 3 103 0
 766 010a 5E98      		cbi 0xb,6
 767 010c 00C0      		rjmp .L43
 768               	.L42:
 108:main.c        **** 			PORTD |= (1<<LED8);
 769               		.loc 3 108 0
 770 010e 5F9A      		sbi 0xb,7
 109:main.c        **** 		}
 110:main.c        **** 		else {
 111:main.c        **** 			PORTD &= ~(1<<LED8);
 112:main.c        **** 		}
 113:main.c        **** 		if (batteryVoltageLevel >= 920) {
 771               		.loc 3 113 0
 772 0110 6839      		cpi r22,-104
 773 0112 93E0      		ldi r25,3
 774 0114 7907      		cpc r23,r25
 775 0116 00F4      		brsh .L44
 776 0118 00C0      		rjmp .L45
 777               	.L43:
 111:main.c        **** 		}
 778               		.loc 3 111 0
 779 011a 5F98      		cbi 0xb,7
 780 011c 00C0      		rjmp .L45
 781               	.L44:
 114:main.c        **** 			PORTB |= (1<<LED9);
 782               		.loc 3 114 0
 783 011e 289A      		sbi 0x5,0
 115:main.c        **** 		}
 116:main.c        **** 		else {
 117:main.c        **** 			PORTB &= ~(1<<LED9);
 118:main.c        **** 		}
 119:main.c        **** 		if (batteryVoltageLevel >= 930) {
 784               		.loc 3 119 0
 785 0120 623A      		cpi r22,-94
 786 0122 7340      		sbci r23,3
 787 0124 00F0      		brlo .L47
 120:main.c        **** 			PORTB |= (1<<LED10);
 788               		.loc 3 120 0
 789 0126 299A      		sbi 0x5,1
 790 0128 00C0      		rjmp .L48
 791               	.L45:
 117:main.c        **** 		}
 792               		.loc 3 117 0
 793 012a 2898      		cbi 0x5,0
 794               	.L47:
 121:main.c        **** 		}
 122:main.c        **** 		else {
 123:main.c        **** 			PORTB &= ~(1<<LED10);
 795               		.loc 3 123 0
 796 012c 2998      		cbi 0x5,1
 797               	.L48:
 124:main.c        **** 		}
 125:main.c        **** 		
 126:main.c        **** 		// Sleep for 1 second
 127:main.c        **** 		watchdog_sleep(T1S);
 798               		.loc 3 127 0
 799 012e 86E0      		ldi r24,lo8(6)
 800 0130 00D0      		rcall watchdog_sleep
 801               	.LVL45:
 802               	.LBE66:
 128:main.c        **** 	}
 803               		.loc 3 128 0
 804 0132 00C0      		rjmp .L49
 805               		.cfi_endproc
 806               	.LFE13:
 808               		.text
 809               	.global	__vector_16
 811               	__vector_16:
 812               	.LFB14:
 129:main.c        **** 	
 130:main.c        **** 	return 0;
 131:main.c        **** }
 132:main.c        **** 
 133:main.c        **** EMPTY_INTERRUPT(ADC_vect);
 813               		.loc 3 133 0
 814               		.cfi_startproc
 815               	/* prologue: naked */
 816               	/* frame size = 0 */
 817               	/* stack size = 0 */
 818               	.L__stack_usage = 0
 819               		.loc 3 133 0
 820               	/* #APP */
 821               	 ;  133 "main.c" 1
 822 01ee 1895      		reti
 823               	 ;  0 "" 2
 824               	/* epilogue start */
 825               	/* #NOAPP */
 826               		.cfi_endproc
 827               	.LFE14:
 829               	.global	__vector_7
 831               	__vector_7:
 832               	.LFB15:
 134:main.c        **** EMPTY_INTERRUPT(WDT_vect);
 833               		.loc 3 134 0
 834               		.cfi_startproc
 835               	/* prologue: naked */
 836               	/* frame size = 0 */
 837               	/* stack size = 0 */
 838               	.L__stack_usage = 0
 839               		.loc 3 134 0
 840               	/* #APP */
 841               	 ;  134 "main.c" 1
 842 01f0 1895      		reti
 843               	 ;  0 "" 2
 844               	/* epilogue start */
 845               	/* #NOAPP */
 846               		.cfi_endproc
 847               	.LFE15:
 849               	.global	__vector_5
 851               	__vector_5:
 852               	.LFB16:
 135:main.c        **** 
 136:main.c        **** ISR(PCINT2_vect) {
 853               		.loc 3 136 0
 854               		.cfi_startproc
 855 01f2 1F92      		push r1
 856               	.LCFI3:
 857               		.cfi_def_cfa_offset 3
 858               		.cfi_offset 1, -2
 859 01f4 0F92      		push r0
 860               	.LCFI4:
 861               		.cfi_def_cfa_offset 4
 862               		.cfi_offset 0, -3
 863 01f6 0FB6      		in r0,__SREG__
 864 01f8 0F92      		push r0
 865 01fa 1124      		clr __zero_reg__
 866 01fc 8F93      		push r24
 867               	.LCFI5:
 868               		.cfi_def_cfa_offset 5
 869               		.cfi_offset 24, -4
 870 01fe 9F93      		push r25
 871               	.LCFI6:
 872               		.cfi_def_cfa_offset 6
 873               		.cfi_offset 25, -5
 874               	/* prologue: Signal */
 875               	/* frame size = 0 */
 876               	/* stack size = 5 */
 877               	.L__stack_usage = 5
 878               	.LVL46:
 879               	.LBB67:
 880               	.LBB68:
 881               		.loc 2 187 0
 882 0200 8FE4      		ldi r24,lo8(-15537)
 883 0202 93EC      		ldi r25,hi8(-15537)
 884 0204 0197      	1:	sbiw r24,1
 885 0206 01F4      		brne 1b
 886 0208 00C0      		rjmp .
 887 020a 0000      		nop
 888               	.LVL47:
 889               	/* epilogue start */
 890               	.LBE68:
 891               	.LBE67:
 137:main.c        **** 	_delay_ms(200);
 138:main.c        **** }
 892               		.loc 3 138 0
 893 020c 9F91      		pop r25
 894 020e 8F91      		pop r24
 895 0210 0F90      		pop r0
 896 0212 0FBE      		out __SREG__,r0
 897 0214 0F90      		pop r0
 898 0216 1F90      		pop r1
 899 0218 1895      		reti
 900               		.cfi_endproc
 901               	.LFE16:
 903               	.Letext0:
 904               		.file 4 "c:\\winavr-20100110\\avr\\include\\stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:2      *ABS*:0000003e __SP_H__
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:3      *ABS*:0000003d __SP_L__
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:4      *ABS*:0000003f __SREG__
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:12     .text:00000000 system_sleep
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:45     .text:00000018 setup_watchdog
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:104    .text:00000046 turn_off_watchdog
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:146    .text:00000060 watchdog_sleep
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:169    .text:00000066 adc_read
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:220    .text:00000094 animate_leds
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:487    .text:000001ac setup
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:548    .text.startup:00000000 main
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:811    .text:000001ee __vector_16
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:831    .text:000001f0 __vector_7
C:\Users\Alex\AppData\Local\Temp\cc621hQS.s:851    .text:000001f2 __vector_5

UNDEFINED SYMBOLS
__udivmodhi4
