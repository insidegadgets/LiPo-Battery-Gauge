   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	system_sleep
  12               	system_sleep:
  13               	.LFB6:
  14               		.file 1 "setup.c"
   1:setup.c       **** /*
   2:setup.c       ****  LiPo Battery Gauge
   3:setup.c       ****  Version: 1.0
   4:setup.c       ****  Author: Alex from insideGadgets (http://www.insidegadgets.com)
   5:setup.c       ****  Created: 13/10/2019
   6:setup.c       ****  Last Modified: 13/10/2019
   7:setup.c       **** 
   8:setup.c       ****  */
   9:setup.c       ****  
  10:setup.c       **** #ifndef cbi
  11:setup.c       **** #define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
  12:setup.c       **** #endif
  13:setup.c       **** #ifndef sbi
  14:setup.c       **** #define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
  15:setup.c       **** #endif
  16:setup.c       **** 
  17:setup.c       **** #ifndef NULL
  18:setup.c       **** #define NULL ((void *)0)
  19:setup.c       **** #endif
  20:setup.c       **** 
  21:setup.c       **** #define LOW 0
  22:setup.c       **** #define HIGH 1
  23:setup.c       **** #define false 0
  24:setup.c       **** #define true 1
  25:setup.c       **** 
  26:setup.c       **** // Watchdog timeouts to values
  27:setup.c       **** #define T16MS 0
  28:setup.c       **** #define T32MS 1
  29:setup.c       **** #define T64MS 2
  30:setup.c       **** #define T128MS 3
  31:setup.c       **** #define T250MS 4
  32:setup.c       **** #define T500MS 5
  33:setup.c       **** #define T1S 6
  34:setup.c       **** #define T2S 7
  35:setup.c       **** #define T4S 8
  36:setup.c       **** #define T8S 9
  37:setup.c       **** 
  38:setup.c       **** #define POWER_ON_PIN PD4
  39:setup.c       **** #define batteryADCPin 3
  40:setup.c       **** #define LED1 PD0
  41:setup.c       **** #define LED2 PD1
  42:setup.c       **** #define LED3 PD2
  43:setup.c       **** #define LED4 PD3
  44:setup.c       **** #define LED5 PB7
  45:setup.c       **** #define LED6 PD5
  46:setup.c       **** #define LED7 PD6
  47:setup.c       **** #define LED8 PD7
  48:setup.c       **** #define LED9 PB0
  49:setup.c       **** #define LED10 PB1
  50:setup.c       **** 
  51:setup.c       **** // ADC Refs
  52:setup.c       **** #define REF_1_1V 0
  53:setup.c       **** #define REF_AVCC 1
  54:setup.c       **** 
  55:setup.c       **** 
  56:setup.c       **** // Sleep
  57:setup.c       **** void system_sleep(void) {
  15               		.loc 1 57 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  58:setup.c       **** 	set_sleep_mode(SLEEP_MODE_PWR_DOWN); // Set sleep mode
  21               		.loc 1 58 0
  22 0000 83B7      		in r24,0x33
  23 0002 897F      		andi r24,lo8(-7)
  24 0004 8460      		ori r24,lo8(4)
  25 0006 83BF      		out 0x33,r24
  59:setup.c       **** 	sleep_mode(); // System sleeps here
  26               		.loc 1 59 0
  27 0008 83B7      		in r24,0x33
  28 000a 8160      		ori r24,lo8(1)
  29 000c 83BF      		out 0x33,r24
  30               	/* #APP */
  31               	 ;  59 "setup.c" 1
  32 000e 8895      		sleep
  33               		
  34               	 ;  0 "" 2
  35               	/* #NOAPP */
  36 0010 83B7      		in r24,0x33
  37 0012 8E7F      		andi r24,lo8(-2)
  38 0014 83BF      		out 0x33,r24
  39 0016 0895      		ret
  40               		.cfi_endproc
  41               	.LFE6:
  43               	.global	setup_watchdog
  45               	setup_watchdog:
  46               	.LFB7:
  60:setup.c       **** }
  61:setup.c       **** 
  62:setup.c       **** // Setup watchdog timed sequence
  63:setup.c       **** void setup_watchdog(uint8_t wdDelay) {
  47               		.loc 1 63 0
  48               		.cfi_startproc
  49               	.LVL0:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  54 0018 8A30      		cpi r24,lo8(10)
  55 001a 00F0      		brlo .L3
  56 001c 89E0      		ldi r24,lo8(9)
  57               	.LVL1:
  58               	.L3:
  64:setup.c       **** 	if (wdDelay > 9) { 
  65:setup.c       **** 		wdDelay = 9;
  66:setup.c       **** 	}
  67:setup.c       **** 	
  68:setup.c       **** 	uint8_t bb = wdDelay & 7;
  59               		.loc 1 68 0
  60 001e 982F      		mov r25,r24
  61 0020 9770      		andi r25,lo8(7)
  62               	.LVL2:
  69:setup.c       **** 	if (wdDelay > 7) { 
  63               		.loc 1 69 0
  64 0022 8830      		cpi r24,lo8(8)
  65 0024 00F0      		brlo .L4
  70:setup.c       **** 		bb |= (1<<5);
  66               		.loc 1 70 0
  67 0026 9062      		ori r25,lo8(32)
  68               	.LVL3:
  69               	.L4:
  71:setup.c       **** 	}
  72:setup.c       **** 	
  73:setup.c       **** 	MCUSR &= ~(1<<WDRF);
  70               		.loc 1 73 0
  71 0028 84B7      		in r24,0x34
  72 002a 877F      		andi r24,lo8(-9)
  73 002c 84BF      		out 0x34,r24
  74:setup.c       **** 	// Start timed sequence
  75:setup.c       **** 	WDTCSR |= (1<<WDCE) | (1<<WDE);
  74               		.loc 1 75 0
  75 002e 8091 6000 		lds r24,96
  76 0032 8861      		ori r24,lo8(24)
  77 0034 8093 6000 		sts 96,r24
  76:setup.c       **** 	// Set new watchdog timeout value
  77:setup.c       **** 	WDTCSR = bb | (1<<WDIE);
  78               		.loc 1 77 0
  79 0038 9064      		ori r25,lo8(64)
  80               	.LVL4:
  81 003a 9093 6000 		sts 96,r25
  82 003e 0895      		ret
  83               		.cfi_endproc
  84               	.LFE7:
  86               	.global	turn_off_watchdog
  88               	turn_off_watchdog:
  89               	.LFB8:
  78:setup.c       **** }
  79:setup.c       **** 
  80:setup.c       **** // Turn off the Watchdog
  81:setup.c       **** void turn_off_watchdog(void) {
  90               		.loc 1 81 0
  91               		.cfi_startproc
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
  82:setup.c       **** 	cli(); // Turn interrupts off
  96               		.loc 1 82 0
  97               	/* #APP */
  98               	 ;  82 "setup.c" 1
  99 0040 F894      		cli
 100               	 ;  0 "" 2
  83:setup.c       **** 	MCUSR &= ~(1<<WDRF);
 101               		.loc 1 83 0
 102               	/* #NOAPP */
 103 0042 84B7      		in r24,0x34
 104 0044 877F      		andi r24,lo8(-9)
 105 0046 84BF      		out 0x34,r24
  84:setup.c       **** 	WDTCSR |= (1<<WDCE) | (1<<WDE);
 106               		.loc 1 84 0
 107 0048 E0E6      		ldi r30,lo8(96)
 108 004a F0E0      		ldi r31,0
 109 004c 8081      		ld r24,Z
 110 004e 8861      		ori r24,lo8(24)
 111 0050 8083      		st Z,r24
  85:setup.c       **** 	WDTCSR = 0;
 112               		.loc 1 85 0
 113 0052 1082      		st Z,__zero_reg__
  86:setup.c       **** 	sei(); // Turn interrupts back on
 114               		.loc 1 86 0
 115               	/* #APP */
 116               	 ;  86 "setup.c" 1
 117 0054 7894      		sei
 118               	 ;  0 "" 2
 119               	/* #NOAPP */
 120 0056 0895      		ret
 121               		.cfi_endproc
 122               	.LFE8:
 124               	.global	watchdog_sleep
 126               	watchdog_sleep:
 127               	.LFB9:
  87:setup.c       **** }
  88:setup.c       **** 
  89:setup.c       **** // Watchdog sleep function - setup, sleep and turn off
  90:setup.c       **** void watchdog_sleep(uint8_t timeout) { 
 128               		.loc 1 90 0
 129               		.cfi_startproc
 130               	.LVL5:
 131               	/* prologue: function */
 132               	/* frame size = 0 */
 133               	/* stack size = 0 */
 134               	.L__stack_usage = 0
  91:setup.c       **** 	setup_watchdog(timeout);
 135               		.loc 1 91 0
 136 0058 00D0      		rcall setup_watchdog
 137               	.LVL6:
  92:setup.c       **** 	system_sleep();
 138               		.loc 1 92 0
 139 005a 00D0      		rcall system_sleep
 140               	.LVL7:
  93:setup.c       **** 	turn_off_watchdog();
 141               		.loc 1 93 0
 142 005c 00C0      		rjmp turn_off_watchdog
 143               	.LVL8:
 144               		.cfi_endproc
 145               	.LFE9:
 147               	.global	adc_read
 149               	adc_read:
 150               	.LFB10:
  94:setup.c       **** }
  95:setup.c       **** 
  96:setup.c       **** // Read the ADC
  97:setup.c       **** int adc_read(uint8_t pin, uint8_t reference) {
 151               		.loc 1 97 0
 152               		.cfi_startproc
 153               	.LVL9:
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 158 005e 8F70      		andi r24,lo8(15)
 159               	.LVL10:
  98:setup.c       **** 	uint8_t low, high;
  99:setup.c       **** 	
 100:setup.c       **** 	// Set the analog reference (high two bits of ADMUX) and select the channel (low 4 bits)
 101:setup.c       **** 	if (reference == REF_1_1V) {
 160               		.loc 1 101 0
 161 0060 6111      		cpse r22,__zero_reg__
 102:setup.c       **** 		ADMUX = (pin & 0x0F); // 1.1V reference
 103:setup.c       **** 	}
 104:setup.c       **** 	else {
 105:setup.c       **** 		ADMUX = (1<<REFS0) | (pin & 0x0F); // AVCC Ref
 162               		.loc 1 105 0
 163 0062 8064      		ori r24,lo8(64)
 164               	.L11:
 165 0064 8093 7C00 		sts 124,r24
 106:setup.c       **** 	}
 107:setup.c       **** 	
 108:setup.c       **** 	set_sleep_mode(SLEEP_MODE_ADC); // Set sleep mode ADC
 166               		.loc 1 108 0
 167 0068 83B7      		in r24,0x33
 168 006a 897F      		andi r24,lo8(-7)
 169 006c 8260      		ori r24,lo8(2)
 170 006e 83BF      		out 0x33,r24
 109:setup.c       **** 	sleep_mode(); // System sleeps here
 171               		.loc 1 109 0
 172 0070 83B7      		in r24,0x33
 173 0072 8160      		ori r24,lo8(1)
 174 0074 83BF      		out 0x33,r24
 175               	/* #APP */
 176               	 ;  109 "setup.c" 1
 177 0076 8895      		sleep
 178               		
 179               	 ;  0 "" 2
 180               	/* #NOAPP */
 181 0078 83B7      		in r24,0x33
 182 007a 8E7F      		andi r24,lo8(-2)
 183 007c 83BF      		out 0x33,r24
 110:setup.c       **** 	
 111:setup.c       **** 	// Read ADCL first
 112:setup.c       **** 	low = ADCL;
 184               		.loc 1 112 0
 185 007e 8091 7800 		lds r24,120
 186               	.LVL11:
 113:setup.c       **** 	high = ADCH;
 187               		.loc 1 113 0
 188 0082 2091 7900 		lds r18,121
 189               	.LVL12:
 114:setup.c       **** 	
 115:setup.c       **** 	// combine the two bytes
 116:setup.c       **** 	return (high << 8) | low;
 190               		.loc 1 116 0
 191 0086 90E0      		ldi r25,0
 117:setup.c       **** }
 192               		.loc 1 117 0
 193 0088 922B      		or r25,r18
 194 008a 0895      		ret
 195               		.cfi_endproc
 196               	.LFE10:
 198               	.global	setup
 200               	setup:
 201               	.LFB11:
 118:setup.c       **** 
 119:setup.c       **** // Setup
 120:setup.c       **** void setup(void) {
 202               		.loc 1 120 0
 203               		.cfi_startproc
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 0 */
 207               	.L__stack_usage = 0
 121:setup.c       **** 	// Turn on pull ups
 122:setup.c       **** 	PORTB |= (1<<PB2) | (1<<PB3) | (1<<PB4) | (1<<PB5) | (1<<PB6); 
 208               		.loc 1 122 0
 209 008c 85B1      		in r24,0x5
 210 008e 8C67      		ori r24,lo8(124)
 211 0090 85B9      		out 0x5,r24
 123:setup.c       **** 	PORTC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC4) | (1<<PC5) | (1<<PC6) | (1<<PC7); 
 212               		.loc 1 123 0
 213 0092 88B1      		in r24,0x8
 214 0094 876F      		ori r24,lo8(-9)
 215 0096 88B9      		out 0x8,r24
 124:setup.c       **** 	
 125:setup.c       **** 	// Setup outputs
 126:setup.c       **** 	DDRD |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8);
 216               		.loc 1 126 0
 217 0098 8AB1      		in r24,0xa
 218 009a 8F6E      		ori r24,lo8(-17)
 219 009c 8AB9      		out 0xa,r24
 127:setup.c       **** 	DDRB |= (1<<LED5)  | (1<<LED9) | (1<<LED10);
 220               		.loc 1 127 0
 221 009e 84B1      		in r24,0x4
 222 00a0 8368      		ori r24,lo8(-125)
 223 00a2 84B9      		out 0x4,r24
 128:setup.c       **** 	
 129:setup.c       **** 	// Blink LEDs
 130:setup.c       **** 	//PORTD |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8);
 131:setup.c       **** 	//PORTB |= (1<<LED5) | (1<<LED9) | (1<<LED10);
 132:setup.c       **** 	//_delay_ms(200);
 133:setup.c       **** 	//PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
 134:setup.c       **** 	//PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
 135:setup.c       **** 	
 136:setup.c       **** 	// Set ADC prescale factor to 8
 137:setup.c       **** 	// 1 MHz / 8 = 125 KHz, inside the desired 50-200 KHz range.
 138:setup.c       **** 	sbi(ADCSRA, ADPS1);
 224               		.loc 1 138 0
 225 00a4 EAE7      		ldi r30,lo8(122)
 226 00a6 F0E0      		ldi r31,0
 227 00a8 8081      		ld r24,Z
 228 00aa 8260      		ori r24,lo8(2)
 229 00ac 8083      		st Z,r24
 139:setup.c       **** 	sbi(ADCSRA, ADPS0);
 230               		.loc 1 139 0
 231 00ae 8081      		ld r24,Z
 232 00b0 8160      		ori r24,lo8(1)
 233 00b2 8083      		st Z,r24
 140:setup.c       **** 	
 141:setup.c       **** 	// Enable ADC/interrupt
 142:setup.c       **** 	sbi(ADCSRA, ADEN);
 234               		.loc 1 142 0
 235 00b4 8081      		ld r24,Z
 236 00b6 8068      		ori r24,lo8(-128)
 237 00b8 8083      		st Z,r24
 143:setup.c       **** 	sbi(ADCSRA, ADIE);
 238               		.loc 1 143 0
 239 00ba 8081      		ld r24,Z
 240 00bc 8860      		ori r24,lo8(8)
 241 00be 8083      		st Z,r24
 144:setup.c       **** 	
 145:setup.c       **** 	// Enable pin change interrupt on PD4
 146:setup.c       **** 	sbi(PCMSK2, PCINT20);
 242               		.loc 1 146 0
 243 00c0 EDE6      		ldi r30,lo8(109)
 244 00c2 F0E0      		ldi r31,0
 245 00c4 8081      		ld r24,Z
 246 00c6 8061      		ori r24,lo8(16)
 247 00c8 8083      		st Z,r24
 147:setup.c       **** 	
 148:setup.c       **** 	sei(); // Turn on interrupts
 248               		.loc 1 148 0
 249               	/* #APP */
 250               	 ;  148 "setup.c" 1
 251 00ca 7894      		sei
 252               	 ;  0 "" 2
 253               	/* #NOAPP */
 254 00cc 0895      		ret
 255               		.cfi_endproc
 256               	.LFE11:
 258               		.section	.text.startup,"ax",@progbits
 259               	.global	main
 261               	main:
 262               	.LFB12:
 263               		.file 2 "main.c"
   1:main.c        **** /*
   2:main.c        ****  LiPo Battery Gauge
   3:main.c        ****  Version: 1.0
   4:main.c        ****  Author: Alex from insideGadgets (http://www.insidegadgets.com)
   5:main.c        ****  Created: 13/10/2019
   6:main.c        ****  Last Modified: 13/10/2019
   7:main.c        ****  
   8:main.c        **** */
   9:main.c        **** 
  10:main.c        **** #define F_CPU 1000000 // 1 MHz
  11:main.c        **** 
  12:main.c        **** #include <avr/io.h>
  13:main.c        **** #include <avr/eeprom.h>
  14:main.c        **** #include <avr/interrupt.h>
  15:main.c        **** #include <util/delay.h>
  16:main.c        **** #include <avr/sleep.h>
  17:main.c        **** #include "setup.c"
  18:main.c        **** 
  19:main.c        **** int main (void) {
 264               		.loc 2 19 0
 265               		.cfi_startproc
 266               	/* prologue: function */
 267               	/* frame size = 0 */
 268               	/* stack size = 0 */
 269               	.L__stack_usage = 0
  20:main.c        **** 	setup();
 270               		.loc 2 20 0
 271 0000 00D0      		rcall setup
 272               	.LVL13:
 273               	.LBB14:
  21:main.c        **** 	
  22:main.c        **** 	while(1) {
  23:main.c        **** 		// Power pin (PD4) low, go to sleep
  24:main.c        **** 		if (!(PIND & (1<<POWER_ON_PIN))) {
  25:main.c        **** 			_delay_ms(50);
  26:main.c        **** 			
  27:main.c        **** 			// Turn off LEDs
  28:main.c        **** 			PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
  29:main.c        **** 			PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
  30:main.c        **** 			
  31:main.c        **** 			// Disable ADC/interrupt
  32:main.c        **** 			cbi(ADCSRA, ADEN);
  33:main.c        **** 			cbi(ADCSRA, ADIE);
  34:main.c        **** 			
  35:main.c        **** 			// Enable pin change interrupt
  36:main.c        **** 			sbi(PCICR, PCIE2);
  37:main.c        **** 			system_sleep();
  38:main.c        **** 			
  39:main.c        **** 			// Enable ADC/interrupt
  40:main.c        **** 			sbi(ADCSRA, ADEN);
  41:main.c        **** 			sbi(ADCSRA, ADIE);
  42:main.c        **** 			
  43:main.c        **** 			// Disable pin change interrupt
  44:main.c        **** 			cbi(PCICR, PCIE2);
  45:main.c        **** 			
  46:main.c        **** 			_delay_ms(10);
  47:main.c        **** 		}
  48:main.c        **** 		
  49:main.c        **** 		
  50:main.c        **** 		// 5 samples over 25ms
  51:main.c        **** 		uint16_t batteryVoltageLevel = 0;
  52:main.c        **** 		for (uint8_t x = 0; x < 5; x++) {
  53:main.c        **** 			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
  54:main.c        **** 			_delay_ms(5);
  55:main.c        **** 		}
  56:main.c        **** 		batteryVoltageLevel = batteryVoltageLevel / 5;
 274               		.loc 2 56 0
 275 0002 85E0      		ldi r24,lo8(5)
 276 0004 E82E      		mov r14,r24
 277 0006 F12C      		mov r15,__zero_reg__
 278               	.L36:
  24:main.c        **** 			_delay_ms(50);
 279               		.loc 2 24 0
 280 0008 4C99      		sbic 0x9,4
 281 000a 00C0      		rjmp .L14
 282               	.LVL14:
 283               	.LBB15:
 284               	.LBB16:
 285               		.file 3 "c:\\winavr-20100110\\avr\\include\\util\\delay.h"
   1:c:\winavr-20100110\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\winavr-20100110\avr\include\util\delay.h ****    All rights reserved.
   5:c:\winavr-20100110\avr\include\util\delay.h **** 
   6:c:\winavr-20100110\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\winavr-20100110\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\winavr-20100110\avr\include\util\delay.h **** 
   9:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\winavr-20100110\avr\include\util\delay.h **** 
  12:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\winavr-20100110\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\winavr-20100110\avr\include\util\delay.h ****      distribution.
  16:c:\winavr-20100110\avr\include\util\delay.h **** 
  17:c:\winavr-20100110\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\winavr-20100110\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\winavr-20100110\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\winavr-20100110\avr\include\util\delay.h **** 
  21:c:\winavr-20100110\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\winavr-20100110\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\winavr-20100110\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\winavr-20100110\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\winavr-20100110\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\winavr-20100110\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\winavr-20100110\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\winavr-20100110\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\winavr-20100110\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\winavr-20100110\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\winavr-20100110\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\winavr-20100110\avr\include\util\delay.h **** 
  33:c:\winavr-20100110\avr\include\util\delay.h **** /* $Id$ */
  34:c:\winavr-20100110\avr\include\util\delay.h **** 
  35:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\winavr-20100110\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\winavr-20100110\avr\include\util\delay.h **** 
  38:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\winavr-20100110\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\winavr-20100110\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\winavr-20100110\avr\include\util\delay.h **** #  endif
  42:c:\winavr-20100110\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\winavr-20100110\avr\include\util\delay.h **** 
  44:c:\winavr-20100110\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\winavr-20100110\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\winavr-20100110\avr\include\util\delay.h **** #include <math.h>
  47:c:\winavr-20100110\avr\include\util\delay.h **** 
  48:c:\winavr-20100110\avr\include\util\delay.h **** /** \file */
  49:c:\winavr-20100110\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\winavr-20100110\avr\include\util\delay.h ****     \code
  51:c:\winavr-20100110\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\winavr-20100110\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\winavr-20100110\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\winavr-20100110\avr\include\util\delay.h ****     \endcode
  55:c:\winavr-20100110\avr\include\util\delay.h **** 
  56:c:\winavr-20100110\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\winavr-20100110\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\winavr-20100110\avr\include\util\delay.h ****     used.
  60:c:\winavr-20100110\avr\include\util\delay.h **** 
  61:c:\winavr-20100110\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\winavr-20100110\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\winavr-20100110\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\winavr-20100110\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\winavr-20100110\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\winavr-20100110\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\winavr-20100110\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\winavr-20100110\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\winavr-20100110\avr\include\util\delay.h **** 
  70:c:\winavr-20100110\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\winavr-20100110\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\winavr-20100110\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\winavr-20100110\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\winavr-20100110\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\winavr-20100110\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\winavr-20100110\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\winavr-20100110\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\winavr-20100110\avr\include\util\delay.h **** 
  79:c:\winavr-20100110\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\winavr-20100110\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\winavr-20100110\avr\include\util\delay.h **** 
  83:c:\winavr-20100110\avr\include\util\delay.h **** */
  84:c:\winavr-20100110\avr\include\util\delay.h **** 
  85:c:\winavr-20100110\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\winavr-20100110\avr\include\util\delay.h **** #endif
  89:c:\winavr-20100110\avr\include\util\delay.h **** 
  90:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\winavr-20100110\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\winavr-20100110\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\winavr-20100110\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\winavr-20100110\avr\include\util\delay.h ****     \def F_CPU
  95:c:\winavr-20100110\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\winavr-20100110\avr\include\util\delay.h **** 
  97:c:\winavr-20100110\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\winavr-20100110\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\winavr-20100110\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\winavr-20100110\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\winavr-20100110\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\winavr-20100110\avr\include\util\delay.h **** 
 103:c:\winavr-20100110\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\winavr-20100110\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\winavr-20100110\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\winavr-20100110\avr\include\util\delay.h ****     integer value.
 107:c:\winavr-20100110\avr\include\util\delay.h ****  */
 108:c:\winavr-20100110\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 110:c:\winavr-20100110\avr\include\util\delay.h **** 
 111:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\winavr-20100110\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 114:c:\winavr-20100110\avr\include\util\delay.h **** 
 115:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\winavr-20100110\avr\include\util\delay.h **** #  include <math.h>
 119:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 120:c:\winavr-20100110\avr\include\util\delay.h **** 
 121:c:\winavr-20100110\avr\include\util\delay.h **** /**
 122:c:\winavr-20100110\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\winavr-20100110\avr\include\util\delay.h **** 
 124:c:\winavr-20100110\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\winavr-20100110\avr\include\util\delay.h **** 
 126:c:\winavr-20100110\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\winavr-20100110\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\winavr-20100110\avr\include\util\delay.h **** 
 129:c:\winavr-20100110\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\winavr-20100110\avr\include\util\delay.h **** 
 131:c:\winavr-20100110\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\winavr-20100110\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\winavr-20100110\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\winavr-20100110\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\winavr-20100110\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\winavr-20100110\avr\include\util\delay.h **** 
 137:c:\winavr-20100110\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\winavr-20100110\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\winavr-20100110\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\winavr-20100110\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\winavr-20100110\avr\include\util\delay.h **** 
 142:c:\winavr-20100110\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\winavr-20100110\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\winavr-20100110\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\winavr-20100110\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\winavr-20100110\avr\include\util\delay.h **** 
 147:c:\winavr-20100110\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\winavr-20100110\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\winavr-20100110\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\winavr-20100110\avr\include\util\delay.h ****    respectively.
 151:c:\winavr-20100110\avr\include\util\delay.h **** 
 152:c:\winavr-20100110\avr\include\util\delay.h ****    \note
 153:c:\winavr-20100110\avr\include\util\delay.h **** 
 154:c:\winavr-20100110\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\winavr-20100110\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\winavr-20100110\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\winavr-20100110\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\winavr-20100110\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\winavr-20100110\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\winavr-20100110\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\winavr-20100110\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\winavr-20100110\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\winavr-20100110\avr\include\util\delay.h **** 
 164:c:\winavr-20100110\avr\include\util\delay.h ****  */
 165:c:\winavr-20100110\avr\include\util\delay.h **** void
 166:c:\winavr-20100110\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\winavr-20100110\avr\include\util\delay.h **** {
 168:c:\winavr-20100110\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\winavr-20100110\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\winavr-20100110\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\winavr-20100110\avr\include\util\delay.h **** 
 176:c:\winavr-20100110\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\winavr-20100110\avr\include\util\delay.h **** 
 179:c:\winavr-20100110\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\winavr-20100110\avr\include\util\delay.h **** 
 182:c:\winavr-20100110\avr\include\util\delay.h **** 	#else
 183:c:\winavr-20100110\avr\include\util\delay.h **** 		//round up by default
 184:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\winavr-20100110\avr\include\util\delay.h **** 	#endif
 186:c:\winavr-20100110\avr\include\util\delay.h **** 
 187:c:\winavr-20100110\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 286               		.loc 3 187 0
 287 000c 83ED      		ldi r24,lo8(12499)
 288 000e 90E3      		ldi r25,hi8(12499)
 289 0010 0197      	1:	sbiw r24,1
 290 0012 01F4      		brne 1b
 291 0014 00C0      		rjmp .
 292 0016 0000      		nop
 293               	.LVL15:
 294               	.LBE16:
 295               	.LBE15:
  28:main.c        **** 			PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
 296               		.loc 2 28 0
 297 0018 8BB1      		in r24,0xb
 298 001a 8071      		andi r24,lo8(16)
 299 001c 8BB9      		out 0xb,r24
  29:main.c        **** 			
 300               		.loc 2 29 0
 301 001e 85B1      		in r24,0x5
 302 0020 8C77      		andi r24,lo8(124)
 303 0022 85B9      		out 0x5,r24
  32:main.c        **** 			cbi(ADCSRA, ADIE);
 304               		.loc 2 32 0
 305 0024 8091 7A00 		lds r24,122
 306 0028 8F77      		andi r24,lo8(127)
 307 002a 8093 7A00 		sts 122,r24
  33:main.c        **** 			
 308               		.loc 2 33 0
 309 002e 8091 7A00 		lds r24,122
 310 0032 877F      		andi r24,lo8(-9)
 311 0034 8093 7A00 		sts 122,r24
  36:main.c        **** 			system_sleep();
 312               		.loc 2 36 0
 313 0038 8091 6800 		lds r24,104
 314 003c 8460      		ori r24,lo8(4)
 315 003e 8093 6800 		sts 104,r24
  37:main.c        **** 			
 316               		.loc 2 37 0
 317 0042 00D0      		rcall system_sleep
 318               	.LVL16:
  40:main.c        **** 			sbi(ADCSRA, ADIE);
 319               		.loc 2 40 0
 320 0044 8091 7A00 		lds r24,122
 321 0048 8068      		ori r24,lo8(-128)
 322 004a 8093 7A00 		sts 122,r24
  41:main.c        **** 			
 323               		.loc 2 41 0
 324 004e 8091 7A00 		lds r24,122
 325 0052 8860      		ori r24,lo8(8)
 326 0054 8093 7A00 		sts 122,r24
  44:main.c        **** 			
 327               		.loc 2 44 0
 328 0058 8091 6800 		lds r24,104
 329 005c 8B7F      		andi r24,lo8(-5)
 330 005e 8093 6800 		sts 104,r24
 331               	.LVL17:
 332               	.LBB17:
 333               	.LBB18:
 334               		.loc 3 187 0
 335 0062 83EC      		ldi r24,lo8(2499)
 336 0064 99E0      		ldi r25,hi8(2499)
 337 0066 0197      	1:	sbiw r24,1
 338 0068 01F4      		brne 1b
 339 006a 00C0      		rjmp .
 340 006c 0000      		nop
 341               	.LVL18:
 342               	.L14:
 343               	.LBE18:
 344               	.LBE17:
 345               	.LBE14:
  19:main.c        **** 	setup();
 346               		.loc 2 19 0 discriminator 1
 347 006e 15E0      		ldi r17,lo8(5)
 348 0070 C0E0      		ldi r28,0
 349 0072 D0E0      		ldi r29,0
 350               	.LVL19:
 351               	.L15:
 352               	.LBB24:
 353               	.LBB19:
  53:main.c        **** 			_delay_ms(5);
 354               		.loc 2 53 0 discriminator 3
 355 0074 60E0      		ldi r22,0
 356 0076 83E0      		ldi r24,lo8(3)
 357 0078 00D0      		rcall adc_read
 358               	.LVL20:
 359 007a C80F      		add r28,r24
 360 007c D91F      		adc r29,r25
 361               	.LVL21:
 362               	.LBB20:
 363               	.LBB21:
 364               		.loc 3 187 0 discriminator 3
 365 007e 81EE      		ldi r24,lo8(1249)
 366 0080 94E0      		ldi r25,hi8(1249)
 367 0082 0197      	1:	sbiw r24,1
 368 0084 01F4      		brne 1b
 369 0086 00C0      		rjmp .
 370 0088 0000      		nop
 371               	.LVL22:
 372 008a 1150      		subi r17,lo8(-(-1))
 373               	.LVL23:
 374               	.LBE21:
 375               	.LBE20:
  52:main.c        **** 			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
 376               		.loc 2 52 0 discriminator 3
 377 008c 01F4      		brne .L15
 378               	.LBE19:
 379               		.loc 2 56 0
 380 008e CE01      		movw r24,r28
 381 0090 B701      		movw r22,r14
 382 0092 00D0      		rcall __udivmodhi4
 383               	.LVL24:
  57:main.c        **** 		
  58:main.c        **** 		
  59:main.c        **** 		// Red
  60:main.c        **** 		if (batteryVoltageLevel >= 675) {
 384               		.loc 2 60 0
 385 0094 633A      		cpi r22,-93
 386 0096 92E0      		ldi r25,2
 387 0098 7907      		cpc r23,r25
 388 009a 00F0      		brlo .L16
  61:main.c        **** 			PORTD |= (1<<LED1);
 389               		.loc 2 61 0
 390 009c 589A      		sbi 0xb,0
  62:main.c        **** 		}
  63:main.c        **** 		else {
  64:main.c        **** 			PORTD &= ~(1<<LED1);
  65:main.c        **** 		}
  66:main.c        **** 		if (batteryVoltageLevel >= 720) {
 391               		.loc 2 66 0
 392 009e 603D      		cpi r22,-48
 393 00a0 22E0      		ldi r18,2
 394 00a2 7207      		cpc r23,r18
 395 00a4 00F4      		brsh .L17
 396 00a6 00C0      		rjmp .L18
 397               	.L16:
  64:main.c        **** 		}
 398               		.loc 2 64 0
 399 00a8 5898      		cbi 0xb,0
 400 00aa 00C0      		rjmp .L18
 401               	.L17:
  67:main.c        **** 			PORTD |= (1<<LED2);
 402               		.loc 2 67 0
 403 00ac 599A      		sbi 0xb,1
  68:main.c        **** 		}
  69:main.c        **** 		else {
  70:main.c        **** 			PORTD &= ~(1<<LED2);
  71:main.c        **** 		}
  72:main.c        **** 		if (batteryVoltageLevel >= 750) {
 404               		.loc 2 72 0
 405 00ae 6E3E      		cpi r22,-18
 406 00b0 82E0      		ldi r24,2
 407 00b2 7807      		cpc r23,r24
 408 00b4 00F4      		brsh .L19
 409 00b6 00C0      		rjmp .L20
 410               	.L18:
  70:main.c        **** 		}
 411               		.loc 2 70 0
 412 00b8 5998      		cbi 0xb,1
 413 00ba 00C0      		rjmp .L20
 414               	.L19:
  73:main.c        **** 			PORTD |= (1<<LED3);
 415               		.loc 2 73 0
 416 00bc 5A9A      		sbi 0xb,2
  74:main.c        **** 		}
  75:main.c        **** 		else {
  76:main.c        **** 			PORTD &= ~(1<<LED3);
  77:main.c        **** 		}
  78:main.c        **** 		
  79:main.c        **** 		// Blue
  80:main.c        **** 		if (batteryVoltageLevel >= 825) {
 417               		.loc 2 80 0
 418 00be 6933      		cpi r22,57
 419 00c0 93E0      		ldi r25,3
 420 00c2 7907      		cpc r23,r25
 421 00c4 00F4      		brsh .L21
 422 00c6 00C0      		rjmp .L22
 423               	.L20:
  76:main.c        **** 		}
 424               		.loc 2 76 0
 425 00c8 5A98      		cbi 0xb,2
 426 00ca 00C0      		rjmp .L22
 427               	.L21:
  81:main.c        **** 			PORTD |= (1<<LED4);
 428               		.loc 2 81 0
 429 00cc 5B9A      		sbi 0xb,3
  82:main.c        **** 		}
  83:main.c        **** 		else {
  84:main.c        **** 			PORTD &= ~(1<<LED4);
  85:main.c        **** 		}
  86:main.c        **** 		if (batteryVoltageLevel >= 850) {
 430               		.loc 2 86 0
 431 00ce 6235      		cpi r22,82
 432 00d0 23E0      		ldi r18,3
 433 00d2 7207      		cpc r23,r18
 434 00d4 00F4      		brsh .L23
 435 00d6 00C0      		rjmp .L24
 436               	.L22:
  84:main.c        **** 		}
 437               		.loc 2 84 0
 438 00d8 5B98      		cbi 0xb,3
 439 00da 00C0      		rjmp .L24
 440               	.L23:
  87:main.c        **** 			PORTB |= (1<<LED5);
 441               		.loc 2 87 0
 442 00dc 2F9A      		sbi 0x5,7
  88:main.c        **** 		}
  89:main.c        **** 		else {
  90:main.c        **** 			PORTB &= ~(1<<LED5);
  91:main.c        **** 		}
  92:main.c        **** 		if (batteryVoltageLevel >= 875) {
 443               		.loc 2 92 0
 444 00de 6B36      		cpi r22,107
 445 00e0 83E0      		ldi r24,3
 446 00e2 7807      		cpc r23,r24
 447 00e4 00F4      		brsh .L25
 448 00e6 00C0      		rjmp .L26
 449               	.L24:
  90:main.c        **** 		}
 450               		.loc 2 90 0
 451 00e8 2F98      		cbi 0x5,7
 452 00ea 00C0      		rjmp .L26
 453               	.L25:
  93:main.c        **** 			PORTD |= (1<<LED6);
 454               		.loc 2 93 0
 455 00ec 5D9A      		sbi 0xb,5
  94:main.c        **** 		}
  95:main.c        **** 		else {
  96:main.c        **** 			PORTD &= ~(1<<LED6);
  97:main.c        **** 		}
  98:main.c        **** 		if (batteryVoltageLevel >= 890) {
 456               		.loc 2 98 0
 457 00ee 6A37      		cpi r22,122
 458 00f0 93E0      		ldi r25,3
 459 00f2 7907      		cpc r23,r25
 460 00f4 00F4      		brsh .L27
 461 00f6 00C0      		rjmp .L28
 462               	.L26:
  96:main.c        **** 		}
 463               		.loc 2 96 0
 464 00f8 5D98      		cbi 0xb,5
 465 00fa 00C0      		rjmp .L28
 466               	.L27:
  99:main.c        **** 			PORTD |= (1<<LED7);
 467               		.loc 2 99 0
 468 00fc 5E9A      		sbi 0xb,6
 100:main.c        **** 		}
 101:main.c        **** 		else {
 102:main.c        **** 			PORTD &= ~(1<<LED7);
 103:main.c        **** 		}
 104:main.c        **** 		
 105:main.c        **** 		// Green
 106:main.c        **** 		if (batteryVoltageLevel >= 910) {
 469               		.loc 2 106 0
 470 00fe 6E38      		cpi r22,-114
 471 0100 23E0      		ldi r18,3
 472 0102 7207      		cpc r23,r18
 473 0104 00F4      		brsh .L29
 474 0106 00C0      		rjmp .L30
 475               	.L28:
 102:main.c        **** 		}
 476               		.loc 2 102 0
 477 0108 5E98      		cbi 0xb,6
 478 010a 00C0      		rjmp .L30
 479               	.L29:
 107:main.c        **** 			PORTD |= (1<<LED8);
 480               		.loc 2 107 0
 481 010c 5F9A      		sbi 0xb,7
 108:main.c        **** 		}
 109:main.c        **** 		else {
 110:main.c        **** 			PORTD &= ~(1<<LED8);
 111:main.c        **** 		}
 112:main.c        **** 		if (batteryVoltageLevel >= 920) {
 482               		.loc 2 112 0
 483 010e 6839      		cpi r22,-104
 484 0110 83E0      		ldi r24,3
 485 0112 7807      		cpc r23,r24
 486 0114 00F4      		brsh .L31
 487 0116 00C0      		rjmp .L32
 488               	.L30:
 110:main.c        **** 		}
 489               		.loc 2 110 0
 490 0118 5F98      		cbi 0xb,7
 491 011a 00C0      		rjmp .L32
 492               	.L31:
 113:main.c        **** 			PORTB |= (1<<LED9);
 493               		.loc 2 113 0
 494 011c 289A      		sbi 0x5,0
 114:main.c        **** 		}
 115:main.c        **** 		else {
 116:main.c        **** 			PORTB &= ~(1<<LED9);
 117:main.c        **** 		}
 118:main.c        **** 		if (batteryVoltageLevel >= 930) {
 495               		.loc 2 118 0
 496 011e 623A      		cpi r22,-94
 497 0120 7340      		sbci r23,3
 498 0122 00F0      		brlo .L34
 119:main.c        **** 			PORTB |= (1<<LED10);
 499               		.loc 2 119 0
 500 0124 299A      		sbi 0x5,1
 501 0126 00C0      		rjmp .L35
 502               	.L32:
 116:main.c        **** 		}
 503               		.loc 2 116 0
 504 0128 2898      		cbi 0x5,0
 505               	.L34:
 120:main.c        **** 		}
 121:main.c        **** 		else {
 122:main.c        **** 			PORTB &= ~(1<<LED10);
 506               		.loc 2 122 0
 507 012a 2998      		cbi 0x5,1
 508               	.L35:
 509               	.LVL25:
 510               	.LBB22:
 511               	.LBB23:
 512               		.loc 3 187 0
 513 012c 2FE3      		ldi r18,lo8(199999)
 514 012e 8DE0      		ldi r24,hi8(199999)
 515 0130 93E0      		ldi r25,hlo8(199999)
 516 0132 2150      	1:	subi r18,1
 517 0134 8040      		sbci r24,0
 518 0136 9040      		sbci r25,0
 519 0138 01F4      		brne 1b
 520 013a 00C0      		rjmp .
 521 013c 0000      		nop
 522 013e 00C0      		rjmp .L36
 523               	.LBE23:
 524               	.LBE22:
 525               	.LBE24:
 526               		.cfi_endproc
 527               	.LFE12:
 529               		.text
 530               	.global	__vector_16
 532               	__vector_16:
 533               	.LFB13:
 123:main.c        **** 		}
 124:main.c        **** 		
 125:main.c        **** 		_delay_ms(1000);
 126:main.c        **** 	}
 127:main.c        **** 	
 128:main.c        **** 	return 0;
 129:main.c        **** }
 130:main.c        **** 
 131:main.c        **** EMPTY_INTERRUPT(ADC_vect);
 534               		.loc 2 131 0
 535               		.cfi_startproc
 536               	/* prologue: naked */
 537               	/* frame size = 0 */
 538               	/* stack size = 0 */
 539               	.L__stack_usage = 0
 540               		.loc 2 131 0
 541               	/* #APP */
 542               	 ;  131 "main.c" 1
 543 00ce 1895      		reti
 544               	 ;  0 "" 2
 545               	/* epilogue start */
 546               	/* #NOAPP */
 547               		.cfi_endproc
 548               	.LFE13:
 550               	.global	__vector_3
 552               	__vector_3:
 553               	.LFB14:
 132:main.c        **** ISR(PCINT0_vect) {
 554               		.loc 2 132 0
 555               		.cfi_startproc
 556 00d0 1F92      		push r1
 557               	.LCFI0:
 558               		.cfi_def_cfa_offset 3
 559               		.cfi_offset 1, -2
 560 00d2 0F92      		push r0
 561               	.LCFI1:
 562               		.cfi_def_cfa_offset 4
 563               		.cfi_offset 0, -3
 564 00d4 0FB6      		in r0,__SREG__
 565 00d6 0F92      		push r0
 566 00d8 1124      		clr __zero_reg__
 567 00da 8F93      		push r24
 568               	.LCFI2:
 569               		.cfi_def_cfa_offset 5
 570               		.cfi_offset 24, -4
 571 00dc 9F93      		push r25
 572               	.LCFI3:
 573               		.cfi_def_cfa_offset 6
 574               		.cfi_offset 25, -5
 575               	/* prologue: Signal */
 576               	/* frame size = 0 */
 577               	/* stack size = 5 */
 578               	.L__stack_usage = 5
 579               	.LVL26:
 580               	.LBB25:
 581               	.LBB26:
 582               		.loc 3 187 0
 583 00de 83ED      		ldi r24,lo8(12499)
 584 00e0 90E3      		ldi r25,hi8(12499)
 585 00e2 0197      	1:	sbiw r24,1
 586 00e4 01F4      		brne 1b
 587 00e6 00C0      		rjmp .
 588 00e8 0000      		nop
 589               	.LVL27:
 590               	/* epilogue start */
 591               	.LBE26:
 592               	.LBE25:
 133:main.c        **** 	_delay_ms(50);
 134:main.c        **** }
 593               		.loc 2 134 0
 594 00ea 9F91      		pop r25
 595 00ec 8F91      		pop r24
 596 00ee 0F90      		pop r0
 597 00f0 0FBE      		out __SREG__,r0
 598 00f2 0F90      		pop r0
 599 00f4 1F90      		pop r1
 600 00f6 1895      		reti
 601               		.cfi_endproc
 602               	.LFE14:
 604               	.Letext0:
 605               		.file 4 "c:\\winavr-20100110\\avr\\include\\stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:2      *ABS*:0000003e __SP_H__
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:3      *ABS*:0000003d __SP_L__
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:4      *ABS*:0000003f __SREG__
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:12     .text:00000000 system_sleep
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:45     .text:00000018 setup_watchdog
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:88     .text:00000040 turn_off_watchdog
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:126    .text:00000058 watchdog_sleep
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:149    .text:0000005e adc_read
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:200    .text:0000008c setup
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:261    .text.startup:00000000 main
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:532    .text:000000ce __vector_16
C:\Users\Alex\AppData\Local\Temp\ccZ1A6mI.s:552    .text:000000d0 __vector_3

UNDEFINED SYMBOLS
__udivmodhi4
