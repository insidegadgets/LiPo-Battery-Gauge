   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	system_sleep
  12               	system_sleep:
  13               	.LFB6:
  14               		.file 1 "setup.c"
   1:setup.c       **** /*
   2:setup.c       ****  LiPo Battery Gauge
   3:setup.c       ****  Version: 1.1
   4:setup.c       ****  Author: Alex from insideGadgets (http://www.insidegadgets.com)
   5:setup.c       ****  Created: 13/10/2019
   6:setup.c       ****  Last Modified: 1/11/2019
   7:setup.c       **** 
   8:setup.c       ****  */
   9:setup.c       ****  
  10:setup.c       **** #ifndef cbi
  11:setup.c       **** #define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
  12:setup.c       **** #endif
  13:setup.c       **** #ifndef sbi
  14:setup.c       **** #define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
  15:setup.c       **** #endif
  16:setup.c       **** 
  17:setup.c       **** #ifndef NULL
  18:setup.c       **** #define NULL ((void *)0)
  19:setup.c       **** #endif
  20:setup.c       **** 
  21:setup.c       **** #define LOW 0
  22:setup.c       **** #define HIGH 1
  23:setup.c       **** #define false 0
  24:setup.c       **** #define true 1
  25:setup.c       **** 
  26:setup.c       **** // Watchdog timeouts to values
  27:setup.c       **** #define T16MS 0
  28:setup.c       **** #define T32MS 1
  29:setup.c       **** #define T64MS 2
  30:setup.c       **** #define T128MS 3
  31:setup.c       **** #define T250MS 4
  32:setup.c       **** #define T500MS 5
  33:setup.c       **** #define T1S 6
  34:setup.c       **** #define T2S 7
  35:setup.c       **** #define T4S 8
  36:setup.c       **** #define T8S 9
  37:setup.c       **** 
  38:setup.c       **** #define POWER_ON_PIN PD4
  39:setup.c       **** #define batteryADCPin 3
  40:setup.c       **** #define LED1 PD0
  41:setup.c       **** #define LED2 PD1
  42:setup.c       **** #define LED3 PD2
  43:setup.c       **** #define LED4 PD3
  44:setup.c       **** #define LED5 PB7
  45:setup.c       **** #define LED6 PD5
  46:setup.c       **** #define LED7 PD6
  47:setup.c       **** #define LED8 PD7
  48:setup.c       **** #define LED9 PB0
  49:setup.c       **** #define LED10 PB1
  50:setup.c       **** 
  51:setup.c       **** // ADC Refs
  52:setup.c       **** #define REF_1_1V 0
  53:setup.c       **** #define REF_AVCC 1
  54:setup.c       **** 
  55:setup.c       **** 
  56:setup.c       **** // Sleep
  57:setup.c       **** void system_sleep(void) {
  15               		.loc 1 57 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  58:setup.c       **** 	set_sleep_mode(SLEEP_MODE_PWR_DOWN); // Set sleep mode
  21               		.loc 1 58 0
  22 0000 83B7      		in r24,0x33
  23 0002 897F      		andi r24,lo8(-7)
  24 0004 8460      		ori r24,lo8(4)
  25 0006 83BF      		out 0x33,r24
  59:setup.c       **** 	sleep_mode(); // System sleeps here
  26               		.loc 1 59 0
  27 0008 83B7      		in r24,0x33
  28 000a 8160      		ori r24,lo8(1)
  29 000c 83BF      		out 0x33,r24
  30               	/* #APP */
  31               	 ;  59 "setup.c" 1
  32 000e 8895      		sleep
  33               		
  34               	 ;  0 "" 2
  35               	/* #NOAPP */
  36 0010 83B7      		in r24,0x33
  37 0012 8E7F      		andi r24,lo8(-2)
  38 0014 83BF      		out 0x33,r24
  39 0016 0895      		ret
  40               		.cfi_endproc
  41               	.LFE6:
  43               	.global	setup_watchdog
  45               	setup_watchdog:
  46               	.LFB7:
  60:setup.c       **** }
  61:setup.c       **** 
  62:setup.c       **** // Setup watchdog timed sequence
  63:setup.c       **** void setup_watchdog(uint8_t wdDelay) {
  47               		.loc 1 63 0
  48               		.cfi_startproc
  49               	.LVL0:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  54 0018 8A30      		cpi r24,lo8(10)
  55 001a 00F0      		brlo .L3
  56 001c 89E0      		ldi r24,lo8(9)
  57               	.LVL1:
  58               	.L3:
  64:setup.c       **** 	if (wdDelay > 9) { 
  65:setup.c       **** 		wdDelay = 9;
  66:setup.c       **** 	}
  67:setup.c       **** 	
  68:setup.c       **** 	uint8_t bb = wdDelay & 7;
  59               		.loc 1 68 0
  60 001e 982F      		mov r25,r24
  61 0020 9770      		andi r25,lo8(7)
  62               	.LVL2:
  69:setup.c       **** 	if (wdDelay > 7) { 
  63               		.loc 1 69 0
  64 0022 8830      		cpi r24,lo8(8)
  65 0024 00F0      		brlo .L4
  70:setup.c       **** 		bb |= (1<<5);
  66               		.loc 1 70 0
  67 0026 9062      		ori r25,lo8(32)
  68               	.LVL3:
  69               	.L4:
  71:setup.c       **** 	}
  72:setup.c       **** 	
  73:setup.c       **** 	cli(); // Turn interrupts off
  70               		.loc 1 73 0
  71               	/* #APP */
  72               	 ;  73 "setup.c" 1
  73 0028 F894      		cli
  74               	 ;  0 "" 2
  74:setup.c       **** 	asm("WDR");
  75               		.loc 1 74 0
  76               	 ;  74 "setup.c" 1
  77 002a A895      		WDR
  78               	 ;  0 "" 2
  75:setup.c       **** 	
  76:setup.c       **** 	MCUSR &= ~(1<<WDRF);
  79               		.loc 1 76 0
  80               	/* #NOAPP */
  81 002c 84B7      		in r24,0x34
  82 002e 877F      		andi r24,lo8(-9)
  83 0030 84BF      		out 0x34,r24
  77:setup.c       **** 	// Start timed sequence
  78:setup.c       **** 	WDTCSR |= (1<<WDCE) | (1<<WDE);
  84               		.loc 1 78 0
  85 0032 8091 6000 		lds r24,96
  86 0036 8861      		ori r24,lo8(24)
  87 0038 8093 6000 		sts 96,r24
  79:setup.c       **** 	// Set new watchdog timeout value
  80:setup.c       **** 	WDTCSR = bb | (1<<WDIE);
  88               		.loc 1 80 0
  89 003c 9064      		ori r25,lo8(64)
  90               	.LVL4:
  91 003e 9093 6000 		sts 96,r25
  81:setup.c       **** 	
  82:setup.c       **** 	sei(); // Turn interrupts back on
  92               		.loc 1 82 0
  93               	/* #APP */
  94               	 ;  82 "setup.c" 1
  95 0042 7894      		sei
  96               	 ;  0 "" 2
  97               	/* #NOAPP */
  98 0044 0895      		ret
  99               		.cfi_endproc
 100               	.LFE7:
 102               	.global	turn_off_watchdog
 104               	turn_off_watchdog:
 105               	.LFB8:
  83:setup.c       **** }
  84:setup.c       **** 
  85:setup.c       **** // Turn off the Watchdog
  86:setup.c       **** void turn_off_watchdog(void) {
 106               		.loc 1 86 0
 107               		.cfi_startproc
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
  87:setup.c       **** 	cli(); // Turn interrupts off
 112               		.loc 1 87 0
 113               	/* #APP */
 114               	 ;  87 "setup.c" 1
 115 0046 F894      		cli
 116               	 ;  0 "" 2
  88:setup.c       **** 	asm("WDR");
 117               		.loc 1 88 0
 118               	 ;  88 "setup.c" 1
 119 0048 A895      		WDR
 120               	 ;  0 "" 2
  89:setup.c       **** 	MCUSR &= ~(1<<WDRF);
 121               		.loc 1 89 0
 122               	/* #NOAPP */
 123 004a 84B7      		in r24,0x34
 124 004c 877F      		andi r24,lo8(-9)
 125 004e 84BF      		out 0x34,r24
  90:setup.c       **** 	WDTCSR |= (1<<WDCE) | (1<<WDIE);
 126               		.loc 1 90 0
 127 0050 E0E6      		ldi r30,lo8(96)
 128 0052 F0E0      		ldi r31,0
 129 0054 8081      		ld r24,Z
 130 0056 8065      		ori r24,lo8(80)
 131 0058 8083      		st Z,r24
  91:setup.c       **** 	WDTCSR = 0;
 132               		.loc 1 91 0
 133 005a 1082      		st Z,__zero_reg__
  92:setup.c       **** 	sei(); // Turn interrupts back on
 134               		.loc 1 92 0
 135               	/* #APP */
 136               	 ;  92 "setup.c" 1
 137 005c 7894      		sei
 138               	 ;  0 "" 2
 139               	/* #NOAPP */
 140 005e 0895      		ret
 141               		.cfi_endproc
 142               	.LFE8:
 144               	.global	watchdog_sleep
 146               	watchdog_sleep:
 147               	.LFB9:
  93:setup.c       **** }
  94:setup.c       **** 
  95:setup.c       **** // Watchdog sleep function - setup, sleep and turn off
  96:setup.c       **** void watchdog_sleep(uint8_t timeout) { 
 148               		.loc 1 96 0
 149               		.cfi_startproc
 150               	.LVL5:
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 0 */
 154               	.L__stack_usage = 0
  97:setup.c       **** 	setup_watchdog(timeout);
 155               		.loc 1 97 0
 156 0060 00D0      		rcall setup_watchdog
 157               	.LVL6:
  98:setup.c       **** 	system_sleep();
 158               		.loc 1 98 0
 159 0062 00D0      		rcall system_sleep
 160               	.LVL7:
  99:setup.c       **** 	turn_off_watchdog();
 161               		.loc 1 99 0
 162 0064 00C0      		rjmp turn_off_watchdog
 163               	.LVL8:
 164               		.cfi_endproc
 165               	.LFE9:
 167               	.global	adc_read
 169               	adc_read:
 170               	.LFB10:
 100:setup.c       **** }
 101:setup.c       **** 
 102:setup.c       **** // Read the ADC
 103:setup.c       **** int adc_read(uint8_t pin, uint8_t reference) {
 171               		.loc 1 103 0
 172               		.cfi_startproc
 173               	.LVL9:
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
 178 0066 8F70      		andi r24,lo8(15)
 179               	.LVL10:
 104:setup.c       **** 	uint8_t low, high;
 105:setup.c       **** 	
 106:setup.c       **** 	// Set the analog reference (high two bits of ADMUX) and select the channel (low 4 bits)
 107:setup.c       **** 	if (reference == REF_1_1V) {
 180               		.loc 1 107 0
 181 0068 6111      		cpse r22,__zero_reg__
 108:setup.c       **** 		ADMUX = (pin & 0x0F); // 1.1V reference
 109:setup.c       **** 	}
 110:setup.c       **** 	else {
 111:setup.c       **** 		ADMUX = (1<<REFS0) | (pin & 0x0F); // AVCC Ref
 182               		.loc 1 111 0
 183 006a 8064      		ori r24,lo8(64)
 184               	.L11:
 185 006c 8093 7C00 		sts 124,r24
 112:setup.c       **** 	}
 113:setup.c       **** 	
 114:setup.c       **** 	set_sleep_mode(SLEEP_MODE_ADC); // Set sleep mode ADC
 186               		.loc 1 114 0
 187 0070 83B7      		in r24,0x33
 188 0072 897F      		andi r24,lo8(-7)
 189 0074 8260      		ori r24,lo8(2)
 190 0076 83BF      		out 0x33,r24
 115:setup.c       **** 	sleep_mode(); // System sleeps here
 191               		.loc 1 115 0
 192 0078 83B7      		in r24,0x33
 193 007a 8160      		ori r24,lo8(1)
 194 007c 83BF      		out 0x33,r24
 195               	/* #APP */
 196               	 ;  115 "setup.c" 1
 197 007e 8895      		sleep
 198               		
 199               	 ;  0 "" 2
 200               	/* #NOAPP */
 201 0080 83B7      		in r24,0x33
 202 0082 8E7F      		andi r24,lo8(-2)
 203 0084 83BF      		out 0x33,r24
 116:setup.c       **** 	
 117:setup.c       **** 	// Read ADCL first
 118:setup.c       **** 	low = ADCL;
 204               		.loc 1 118 0
 205 0086 8091 7800 		lds r24,120
 206               	.LVL11:
 119:setup.c       **** 	high = ADCH;
 207               		.loc 1 119 0
 208 008a 2091 7900 		lds r18,121
 209               	.LVL12:
 120:setup.c       **** 	
 121:setup.c       **** 	// combine the two bytes
 122:setup.c       **** 	return (high << 8) | low;
 210               		.loc 1 122 0
 211 008e 90E0      		ldi r25,0
 123:setup.c       **** }
 212               		.loc 1 123 0
 213 0090 922B      		or r25,r18
 214 0092 0895      		ret
 215               		.cfi_endproc
 216               	.LFE10:
 218               	.global	setup
 220               	setup:
 221               	.LFB11:
 124:setup.c       **** 
 125:setup.c       **** // Setup
 126:setup.c       **** void setup(void) {
 222               		.loc 1 126 0
 223               		.cfi_startproc
 224               	/* prologue: function */
 225               	/* frame size = 0 */
 226               	/* stack size = 0 */
 227               	.L__stack_usage = 0
 127:setup.c       **** 	// Turn on pull ups
 128:setup.c       **** 	PORTB |= (1<<PB2) | (1<<PB3) | (1<<PB4) | (1<<PB5) | (1<<PB6); 
 228               		.loc 1 128 0
 229 0094 85B1      		in r24,0x5
 230 0096 8C67      		ori r24,lo8(124)
 231 0098 85B9      		out 0x5,r24
 129:setup.c       **** 	PORTC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC4) | (1<<PC5) | (1<<PC6) | (1<<PC7); 
 232               		.loc 1 129 0
 233 009a 88B1      		in r24,0x8
 234 009c 876F      		ori r24,lo8(-9)
 235 009e 88B9      		out 0x8,r24
 130:setup.c       **** 	
 131:setup.c       **** 	// Setup outputs
 132:setup.c       **** 	DDRD |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8);
 236               		.loc 1 132 0
 237 00a0 8AB1      		in r24,0xa
 238 00a2 8F6E      		ori r24,lo8(-17)
 239 00a4 8AB9      		out 0xa,r24
 133:setup.c       **** 	DDRB |= (1<<LED5)  | (1<<LED9) | (1<<LED10);
 240               		.loc 1 133 0
 241 00a6 84B1      		in r24,0x4
 242 00a8 8368      		ori r24,lo8(-125)
 243 00aa 84B9      		out 0x4,r24
 134:setup.c       **** 	
 135:setup.c       **** 	// Blink LEDs
 136:setup.c       **** 	//PORTD |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8);
 137:setup.c       **** 	//PORTB |= (1<<LED5) | (1<<LED9) | (1<<LED10);
 138:setup.c       **** 	//_delay_ms(200);
 139:setup.c       **** 	//PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
 140:setup.c       **** 	//PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
 141:setup.c       **** 	
 142:setup.c       **** 	// Set ADC prescale factor to 8
 143:setup.c       **** 	// 1 MHz / 8 = 125 KHz, inside the desired 50-200 KHz range.
 144:setup.c       **** 	sbi(ADCSRA, ADPS1);
 244               		.loc 1 144 0
 245 00ac EAE7      		ldi r30,lo8(122)
 246 00ae F0E0      		ldi r31,0
 247 00b0 8081      		ld r24,Z
 248 00b2 8260      		ori r24,lo8(2)
 249 00b4 8083      		st Z,r24
 145:setup.c       **** 	sbi(ADCSRA, ADPS0);
 250               		.loc 1 145 0
 251 00b6 8081      		ld r24,Z
 252 00b8 8160      		ori r24,lo8(1)
 253 00ba 8083      		st Z,r24
 146:setup.c       **** 	
 147:setup.c       **** 	// Enable ADC/interrupt
 148:setup.c       **** 	sbi(ADCSRA, ADEN);
 254               		.loc 1 148 0
 255 00bc 8081      		ld r24,Z
 256 00be 8068      		ori r24,lo8(-128)
 257 00c0 8083      		st Z,r24
 149:setup.c       **** 	sbi(ADCSRA, ADIE);
 258               		.loc 1 149 0
 259 00c2 8081      		ld r24,Z
 260 00c4 8860      		ori r24,lo8(8)
 261 00c6 8083      		st Z,r24
 150:setup.c       **** 	
 151:setup.c       **** 	// Enable pin change interrupt on PD4
 152:setup.c       **** 	sbi(PCMSK2, PCINT20);
 262               		.loc 1 152 0
 263 00c8 EDE6      		ldi r30,lo8(109)
 264 00ca F0E0      		ldi r31,0
 265 00cc 8081      		ld r24,Z
 266 00ce 8061      		ori r24,lo8(16)
 267 00d0 8083      		st Z,r24
 153:setup.c       **** 	
 154:setup.c       **** 	sei(); // Turn on interrupts
 268               		.loc 1 154 0
 269               	/* #APP */
 270               	 ;  154 "setup.c" 1
 271 00d2 7894      		sei
 272               	 ;  0 "" 2
 273               	/* #NOAPP */
 274 00d4 0895      		ret
 275               		.cfi_endproc
 276               	.LFE11:
 278               		.section	.text.startup,"ax",@progbits
 279               	.global	main
 281               	main:
 282               	.LFB12:
 283               		.file 2 "main.c"
   1:main.c        **** /*
   2:main.c        ****  LiPo Battery Gauge
   3:main.c        ****  Version: 1.1
   4:main.c        ****  Author: Alex from insideGadgets (http://www.insidegadgets.com)
   5:main.c        ****  Created: 13/10/2019
   6:main.c        ****  Last Modified: 11/11/2019
   7:main.c        ****  
   8:main.c        **** */
   9:main.c        **** 
  10:main.c        **** #define F_CPU 1000000 // 1 MHz
  11:main.c        **** 
  12:main.c        **** #include <avr/io.h>
  13:main.c        **** #include <avr/eeprom.h>
  14:main.c        **** #include <avr/interrupt.h>
  15:main.c        **** #include <util/delay.h>
  16:main.c        **** #include <avr/sleep.h>
  17:main.c        **** #include "setup.c"
  18:main.c        **** 
  19:main.c        **** int main (void) {
 284               		.loc 2 19 0
 285               		.cfi_startproc
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
  20:main.c        **** 	setup();
 290               		.loc 2 20 0
 291 0000 00D0      		rcall setup
 292               	.LVL13:
 293               	.LBB12:
  21:main.c        **** 	
  22:main.c        **** 	while(1) {
  23:main.c        **** 		// Power pin (PD4) low, go to sleep
  24:main.c        **** 		if (!(PIND & (1<<POWER_ON_PIN))) {
  25:main.c        **** 			_delay_ms(200);
  26:main.c        **** 			
  27:main.c        **** 			// Turn off LEDs
  28:main.c        **** 			PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
  29:main.c        **** 			PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
  30:main.c        **** 			
  31:main.c        **** 			// Disable ADC/interrupt
  32:main.c        **** 			cbi(ADCSRA, ADEN);
  33:main.c        **** 			cbi(ADCSRA, ADIE);
  34:main.c        **** 			
  35:main.c        **** 			// Enable pin change interrupt
  36:main.c        **** 			sbi(PCICR, PCIE2);
  37:main.c        **** 			system_sleep();
  38:main.c        **** 			
  39:main.c        **** 			// Enable ADC/interrupt
  40:main.c        **** 			sbi(ADCSRA, ADEN);
  41:main.c        **** 			sbi(ADCSRA, ADIE);
  42:main.c        **** 			
  43:main.c        **** 			// Disable pin change interrupt
  44:main.c        **** 			cbi(PCICR, PCIE2);
  45:main.c        **** 			_delay_ms(10);
  46:main.c        **** 		}
  47:main.c        **** 		
  48:main.c        **** 		
  49:main.c        **** 		// 5 samples over 25ms
  50:main.c        **** 		uint16_t batteryVoltageLevel = 0;
  51:main.c        **** 		for (uint8_t x = 0; x < 5; x++) {
  52:main.c        **** 			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
  53:main.c        **** 			_delay_ms(5);
  54:main.c        **** 		}
  55:main.c        **** 		batteryVoltageLevel = batteryVoltageLevel / 5;
 294               		.loc 2 55 0
 295 0002 85E0      		ldi r24,lo8(5)
 296 0004 E82E      		mov r14,r24
 297 0006 F12C      		mov r15,__zero_reg__
 298               	.L36:
  24:main.c        **** 			_delay_ms(200);
 299               		.loc 2 24 0
 300 0008 4C99      		sbic 0x9,4
 301 000a 00C0      		rjmp .L14
 302               	.LVL14:
 303               	.LBB13:
 304               	.LBB14:
 305               		.file 3 "c:\\winavr-20100110\\avr\\include\\util\\delay.h"
   1:c:\winavr-20100110\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\winavr-20100110\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\winavr-20100110\avr\include\util\delay.h ****    All rights reserved.
   5:c:\winavr-20100110\avr\include\util\delay.h **** 
   6:c:\winavr-20100110\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\winavr-20100110\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\winavr-20100110\avr\include\util\delay.h **** 
   9:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\winavr-20100110\avr\include\util\delay.h **** 
  12:c:\winavr-20100110\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\winavr-20100110\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\winavr-20100110\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\winavr-20100110\avr\include\util\delay.h ****      distribution.
  16:c:\winavr-20100110\avr\include\util\delay.h **** 
  17:c:\winavr-20100110\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\winavr-20100110\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\winavr-20100110\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\winavr-20100110\avr\include\util\delay.h **** 
  21:c:\winavr-20100110\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\winavr-20100110\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\winavr-20100110\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\winavr-20100110\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\winavr-20100110\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\winavr-20100110\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\winavr-20100110\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\winavr-20100110\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\winavr-20100110\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\winavr-20100110\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\winavr-20100110\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\winavr-20100110\avr\include\util\delay.h **** 
  33:c:\winavr-20100110\avr\include\util\delay.h **** /* $Id$ */
  34:c:\winavr-20100110\avr\include\util\delay.h **** 
  35:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\winavr-20100110\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\winavr-20100110\avr\include\util\delay.h **** 
  38:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\winavr-20100110\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\winavr-20100110\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\winavr-20100110\avr\include\util\delay.h **** #  endif
  42:c:\winavr-20100110\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\winavr-20100110\avr\include\util\delay.h **** 
  44:c:\winavr-20100110\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\winavr-20100110\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\winavr-20100110\avr\include\util\delay.h **** #include <math.h>
  47:c:\winavr-20100110\avr\include\util\delay.h **** 
  48:c:\winavr-20100110\avr\include\util\delay.h **** /** \file */
  49:c:\winavr-20100110\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\winavr-20100110\avr\include\util\delay.h ****     \code
  51:c:\winavr-20100110\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\winavr-20100110\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\winavr-20100110\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\winavr-20100110\avr\include\util\delay.h ****     \endcode
  55:c:\winavr-20100110\avr\include\util\delay.h **** 
  56:c:\winavr-20100110\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\winavr-20100110\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\winavr-20100110\avr\include\util\delay.h ****     used.
  60:c:\winavr-20100110\avr\include\util\delay.h **** 
  61:c:\winavr-20100110\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\winavr-20100110\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\winavr-20100110\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\winavr-20100110\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\winavr-20100110\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\winavr-20100110\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\winavr-20100110\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\winavr-20100110\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\winavr-20100110\avr\include\util\delay.h **** 
  70:c:\winavr-20100110\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\winavr-20100110\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\winavr-20100110\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\winavr-20100110\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\winavr-20100110\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\winavr-20100110\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\winavr-20100110\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\winavr-20100110\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\winavr-20100110\avr\include\util\delay.h **** 
  79:c:\winavr-20100110\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\winavr-20100110\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\winavr-20100110\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\winavr-20100110\avr\include\util\delay.h **** 
  83:c:\winavr-20100110\avr\include\util\delay.h **** */
  84:c:\winavr-20100110\avr\include\util\delay.h **** 
  85:c:\winavr-20100110\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\winavr-20100110\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\winavr-20100110\avr\include\util\delay.h **** #endif
  89:c:\winavr-20100110\avr\include\util\delay.h **** 
  90:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\winavr-20100110\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\winavr-20100110\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\winavr-20100110\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\winavr-20100110\avr\include\util\delay.h ****     \def F_CPU
  95:c:\winavr-20100110\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\winavr-20100110\avr\include\util\delay.h **** 
  97:c:\winavr-20100110\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\winavr-20100110\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\winavr-20100110\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\winavr-20100110\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\winavr-20100110\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\winavr-20100110\avr\include\util\delay.h **** 
 103:c:\winavr-20100110\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\winavr-20100110\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\winavr-20100110\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\winavr-20100110\avr\include\util\delay.h ****     integer value.
 107:c:\winavr-20100110\avr\include\util\delay.h ****  */
 108:c:\winavr-20100110\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 110:c:\winavr-20100110\avr\include\util\delay.h **** 
 111:c:\winavr-20100110\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\winavr-20100110\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 114:c:\winavr-20100110\avr\include\util\delay.h **** 
 115:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\winavr-20100110\avr\include\util\delay.h **** #  include <math.h>
 119:c:\winavr-20100110\avr\include\util\delay.h **** #endif
 120:c:\winavr-20100110\avr\include\util\delay.h **** 
 121:c:\winavr-20100110\avr\include\util\delay.h **** /**
 122:c:\winavr-20100110\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\winavr-20100110\avr\include\util\delay.h **** 
 124:c:\winavr-20100110\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\winavr-20100110\avr\include\util\delay.h **** 
 126:c:\winavr-20100110\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\winavr-20100110\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\winavr-20100110\avr\include\util\delay.h **** 
 129:c:\winavr-20100110\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\winavr-20100110\avr\include\util\delay.h **** 
 131:c:\winavr-20100110\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\winavr-20100110\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\winavr-20100110\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\winavr-20100110\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\winavr-20100110\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\winavr-20100110\avr\include\util\delay.h **** 
 137:c:\winavr-20100110\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\winavr-20100110\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\winavr-20100110\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\winavr-20100110\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\winavr-20100110\avr\include\util\delay.h **** 
 142:c:\winavr-20100110\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\winavr-20100110\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\winavr-20100110\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\winavr-20100110\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\winavr-20100110\avr\include\util\delay.h **** 
 147:c:\winavr-20100110\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\winavr-20100110\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\winavr-20100110\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\winavr-20100110\avr\include\util\delay.h ****    respectively.
 151:c:\winavr-20100110\avr\include\util\delay.h **** 
 152:c:\winavr-20100110\avr\include\util\delay.h ****    \note
 153:c:\winavr-20100110\avr\include\util\delay.h **** 
 154:c:\winavr-20100110\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\winavr-20100110\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\winavr-20100110\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\winavr-20100110\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\winavr-20100110\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\winavr-20100110\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\winavr-20100110\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\winavr-20100110\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\winavr-20100110\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\winavr-20100110\avr\include\util\delay.h **** 
 164:c:\winavr-20100110\avr\include\util\delay.h ****  */
 165:c:\winavr-20100110\avr\include\util\delay.h **** void
 166:c:\winavr-20100110\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\winavr-20100110\avr\include\util\delay.h **** {
 168:c:\winavr-20100110\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\winavr-20100110\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\winavr-20100110\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\winavr-20100110\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\winavr-20100110\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\winavr-20100110\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\winavr-20100110\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\winavr-20100110\avr\include\util\delay.h **** 
 176:c:\winavr-20100110\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\winavr-20100110\avr\include\util\delay.h **** 
 179:c:\winavr-20100110\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\winavr-20100110\avr\include\util\delay.h **** 
 182:c:\winavr-20100110\avr\include\util\delay.h **** 	#else
 183:c:\winavr-20100110\avr\include\util\delay.h **** 		//round up by default
 184:c:\winavr-20100110\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\winavr-20100110\avr\include\util\delay.h **** 	#endif
 186:c:\winavr-20100110\avr\include\util\delay.h **** 
 187:c:\winavr-20100110\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 306               		.loc 3 187 0
 307 000c 8FE4      		ldi r24,lo8(-15537)
 308 000e 93EC      		ldi r25,hi8(-15537)
 309 0010 0197      	1:	sbiw r24,1
 310 0012 01F4      		brne 1b
 311 0014 00C0      		rjmp .
 312 0016 0000      		nop
 313               	.LVL15:
 314               	.LBE14:
 315               	.LBE13:
  28:main.c        **** 			PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
 316               		.loc 2 28 0
 317 0018 8BB1      		in r24,0xb
 318 001a 8071      		andi r24,lo8(16)
 319 001c 8BB9      		out 0xb,r24
  29:main.c        **** 			
 320               		.loc 2 29 0
 321 001e 85B1      		in r24,0x5
 322 0020 8C77      		andi r24,lo8(124)
 323 0022 85B9      		out 0x5,r24
  32:main.c        **** 			cbi(ADCSRA, ADIE);
 324               		.loc 2 32 0
 325 0024 8091 7A00 		lds r24,122
 326 0028 8F77      		andi r24,lo8(127)
 327 002a 8093 7A00 		sts 122,r24
  33:main.c        **** 			
 328               		.loc 2 33 0
 329 002e 8091 7A00 		lds r24,122
 330 0032 877F      		andi r24,lo8(-9)
 331 0034 8093 7A00 		sts 122,r24
  36:main.c        **** 			system_sleep();
 332               		.loc 2 36 0
 333 0038 8091 6800 		lds r24,104
 334 003c 8460      		ori r24,lo8(4)
 335 003e 8093 6800 		sts 104,r24
  37:main.c        **** 			
 336               		.loc 2 37 0
 337 0042 00D0      		rcall system_sleep
 338               	.LVL16:
  40:main.c        **** 			sbi(ADCSRA, ADIE);
 339               		.loc 2 40 0
 340 0044 8091 7A00 		lds r24,122
 341 0048 8068      		ori r24,lo8(-128)
 342 004a 8093 7A00 		sts 122,r24
  41:main.c        **** 			
 343               		.loc 2 41 0
 344 004e 8091 7A00 		lds r24,122
 345 0052 8860      		ori r24,lo8(8)
 346 0054 8093 7A00 		sts 122,r24
  44:main.c        **** 			_delay_ms(10);
 347               		.loc 2 44 0
 348 0058 8091 6800 		lds r24,104
 349 005c 8B7F      		andi r24,lo8(-5)
 350 005e 8093 6800 		sts 104,r24
 351               	.LVL17:
 352               	.LBB15:
 353               	.LBB16:
 354               		.loc 3 187 0
 355 0062 83EC      		ldi r24,lo8(2499)
 356 0064 99E0      		ldi r25,hi8(2499)
 357 0066 0197      	1:	sbiw r24,1
 358 0068 01F4      		brne 1b
 359 006a 00C0      		rjmp .
 360 006c 0000      		nop
 361               	.LVL18:
 362               	.L14:
 363               	.LBE16:
 364               	.LBE15:
 365               	.LBE12:
  19:main.c        **** 	setup();
 366               		.loc 2 19 0 discriminator 1
 367 006e 15E0      		ldi r17,lo8(5)
 368 0070 C0E0      		ldi r28,0
 369 0072 D0E0      		ldi r29,0
 370               	.LVL19:
 371               	.L15:
 372               	.LBB20:
 373               	.LBB17:
  52:main.c        **** 			_delay_ms(5);
 374               		.loc 2 52 0 discriminator 3
 375 0074 60E0      		ldi r22,0
 376 0076 83E0      		ldi r24,lo8(3)
 377 0078 00D0      		rcall adc_read
 378               	.LVL20:
 379 007a C80F      		add r28,r24
 380 007c D91F      		adc r29,r25
 381               	.LVL21:
 382               	.LBB18:
 383               	.LBB19:
 384               		.loc 3 187 0 discriminator 3
 385 007e 81EE      		ldi r24,lo8(1249)
 386 0080 94E0      		ldi r25,hi8(1249)
 387 0082 0197      	1:	sbiw r24,1
 388 0084 01F4      		brne 1b
 389 0086 00C0      		rjmp .
 390 0088 0000      		nop
 391               	.LVL22:
 392 008a 1150      		subi r17,lo8(-(-1))
 393               	.LVL23:
 394               	.LBE19:
 395               	.LBE18:
  51:main.c        **** 			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
 396               		.loc 2 51 0 discriminator 3
 397 008c 01F4      		brne .L15
 398               	.LBE17:
 399               		.loc 2 55 0
 400 008e CE01      		movw r24,r28
 401 0090 B701      		movw r22,r14
 402 0092 00D0      		rcall __udivmodhi4
 403               	.LVL24:
  56:main.c        **** 		
  57:main.c        **** 		
  58:main.c        **** 		// Red
  59:main.c        **** 		if (batteryVoltageLevel >= 675) {
 404               		.loc 2 59 0
 405 0094 633A      		cpi r22,-93
 406 0096 92E0      		ldi r25,2
 407 0098 7907      		cpc r23,r25
 408 009a 00F0      		brlo .L16
  60:main.c        **** 			PORTD |= (1<<LED1);
 409               		.loc 2 60 0
 410 009c 589A      		sbi 0xb,0
  61:main.c        **** 		}
  62:main.c        **** 		else {
  63:main.c        **** 			PORTD &= ~(1<<LED1);
  64:main.c        **** 		}
  65:main.c        **** 		if (batteryVoltageLevel >= 720) {
 411               		.loc 2 65 0
 412 009e 603D      		cpi r22,-48
 413 00a0 82E0      		ldi r24,2
 414 00a2 7807      		cpc r23,r24
 415 00a4 00F4      		brsh .L17
 416 00a6 00C0      		rjmp .L18
 417               	.L16:
  63:main.c        **** 		}
 418               		.loc 2 63 0
 419 00a8 5898      		cbi 0xb,0
 420 00aa 00C0      		rjmp .L18
 421               	.L17:
  66:main.c        **** 			PORTD |= (1<<LED2);
 422               		.loc 2 66 0
 423 00ac 599A      		sbi 0xb,1
  67:main.c        **** 		}
  68:main.c        **** 		else {
  69:main.c        **** 			PORTD &= ~(1<<LED2);
  70:main.c        **** 		}
  71:main.c        **** 		if (batteryVoltageLevel >= 750) {
 424               		.loc 2 71 0
 425 00ae 6E3E      		cpi r22,-18
 426 00b0 92E0      		ldi r25,2
 427 00b2 7907      		cpc r23,r25
 428 00b4 00F4      		brsh .L19
 429 00b6 00C0      		rjmp .L20
 430               	.L18:
  69:main.c        **** 		}
 431               		.loc 2 69 0
 432 00b8 5998      		cbi 0xb,1
 433 00ba 00C0      		rjmp .L20
 434               	.L19:
  72:main.c        **** 			PORTD |= (1<<LED3);
 435               		.loc 2 72 0
 436 00bc 5A9A      		sbi 0xb,2
  73:main.c        **** 		}
  74:main.c        **** 		else {
  75:main.c        **** 			PORTD &= ~(1<<LED3);
  76:main.c        **** 		}
  77:main.c        **** 		
  78:main.c        **** 		// Blue
  79:main.c        **** 		if (batteryVoltageLevel >= 825) {
 437               		.loc 2 79 0
 438 00be 6933      		cpi r22,57
 439 00c0 83E0      		ldi r24,3
 440 00c2 7807      		cpc r23,r24
 441 00c4 00F4      		brsh .L21
 442 00c6 00C0      		rjmp .L22
 443               	.L20:
  75:main.c        **** 		}
 444               		.loc 2 75 0
 445 00c8 5A98      		cbi 0xb,2
 446 00ca 00C0      		rjmp .L22
 447               	.L21:
  80:main.c        **** 			PORTD |= (1<<LED4);
 448               		.loc 2 80 0
 449 00cc 5B9A      		sbi 0xb,3
  81:main.c        **** 		}
  82:main.c        **** 		else {
  83:main.c        **** 			PORTD &= ~(1<<LED4);
  84:main.c        **** 		}
  85:main.c        **** 		if (batteryVoltageLevel >= 850) {
 450               		.loc 2 85 0
 451 00ce 6235      		cpi r22,82
 452 00d0 93E0      		ldi r25,3
 453 00d2 7907      		cpc r23,r25
 454 00d4 00F4      		brsh .L23
 455 00d6 00C0      		rjmp .L24
 456               	.L22:
  83:main.c        **** 		}
 457               		.loc 2 83 0
 458 00d8 5B98      		cbi 0xb,3
 459 00da 00C0      		rjmp .L24
 460               	.L23:
  86:main.c        **** 			PORTB |= (1<<LED5);
 461               		.loc 2 86 0
 462 00dc 2F9A      		sbi 0x5,7
  87:main.c        **** 		}
  88:main.c        **** 		else {
  89:main.c        **** 			PORTB &= ~(1<<LED5);
  90:main.c        **** 		}
  91:main.c        **** 		if (batteryVoltageLevel >= 875) {
 463               		.loc 2 91 0
 464 00de 6B36      		cpi r22,107
 465 00e0 83E0      		ldi r24,3
 466 00e2 7807      		cpc r23,r24
 467 00e4 00F4      		brsh .L25
 468 00e6 00C0      		rjmp .L26
 469               	.L24:
  89:main.c        **** 		}
 470               		.loc 2 89 0
 471 00e8 2F98      		cbi 0x5,7
 472 00ea 00C0      		rjmp .L26
 473               	.L25:
  92:main.c        **** 			PORTD |= (1<<LED6);
 474               		.loc 2 92 0
 475 00ec 5D9A      		sbi 0xb,5
  93:main.c        **** 		}
  94:main.c        **** 		else {
  95:main.c        **** 			PORTD &= ~(1<<LED6);
  96:main.c        **** 		}
  97:main.c        **** 		if (batteryVoltageLevel >= 890) {
 476               		.loc 2 97 0
 477 00ee 6A37      		cpi r22,122
 478 00f0 93E0      		ldi r25,3
 479 00f2 7907      		cpc r23,r25
 480 00f4 00F4      		brsh .L27
 481 00f6 00C0      		rjmp .L28
 482               	.L26:
  95:main.c        **** 		}
 483               		.loc 2 95 0
 484 00f8 5D98      		cbi 0xb,5
 485 00fa 00C0      		rjmp .L28
 486               	.L27:
  98:main.c        **** 			PORTD |= (1<<LED7);
 487               		.loc 2 98 0
 488 00fc 5E9A      		sbi 0xb,6
  99:main.c        **** 		}
 100:main.c        **** 		else {
 101:main.c        **** 			PORTD &= ~(1<<LED7);
 102:main.c        **** 		}
 103:main.c        **** 		
 104:main.c        **** 		// Green
 105:main.c        **** 		if (batteryVoltageLevel >= 910) {
 489               		.loc 2 105 0
 490 00fe 6E38      		cpi r22,-114
 491 0100 83E0      		ldi r24,3
 492 0102 7807      		cpc r23,r24
 493 0104 00F4      		brsh .L29
 494 0106 00C0      		rjmp .L30
 495               	.L28:
 101:main.c        **** 		}
 496               		.loc 2 101 0
 497 0108 5E98      		cbi 0xb,6
 498 010a 00C0      		rjmp .L30
 499               	.L29:
 106:main.c        **** 			PORTD |= (1<<LED8);
 500               		.loc 2 106 0
 501 010c 5F9A      		sbi 0xb,7
 107:main.c        **** 		}
 108:main.c        **** 		else {
 109:main.c        **** 			PORTD &= ~(1<<LED8);
 110:main.c        **** 		}
 111:main.c        **** 		if (batteryVoltageLevel >= 920) {
 502               		.loc 2 111 0
 503 010e 6839      		cpi r22,-104
 504 0110 93E0      		ldi r25,3
 505 0112 7907      		cpc r23,r25
 506 0114 00F4      		brsh .L31
 507 0116 00C0      		rjmp .L32
 508               	.L30:
 109:main.c        **** 		}
 509               		.loc 2 109 0
 510 0118 5F98      		cbi 0xb,7
 511 011a 00C0      		rjmp .L32
 512               	.L31:
 112:main.c        **** 			PORTB |= (1<<LED9);
 513               		.loc 2 112 0
 514 011c 289A      		sbi 0x5,0
 113:main.c        **** 		}
 114:main.c        **** 		else {
 115:main.c        **** 			PORTB &= ~(1<<LED9);
 116:main.c        **** 		}
 117:main.c        **** 		if (batteryVoltageLevel >= 930) {
 515               		.loc 2 117 0
 516 011e 623A      		cpi r22,-94
 517 0120 7340      		sbci r23,3
 518 0122 00F0      		brlo .L34
 118:main.c        **** 			PORTB |= (1<<LED10);
 519               		.loc 2 118 0
 520 0124 299A      		sbi 0x5,1
 521 0126 00C0      		rjmp .L35
 522               	.L32:
 115:main.c        **** 		}
 523               		.loc 2 115 0
 524 0128 2898      		cbi 0x5,0
 525               	.L34:
 119:main.c        **** 		}
 120:main.c        **** 		else {
 121:main.c        **** 			PORTB &= ~(1<<LED10);
 526               		.loc 2 121 0
 527 012a 2998      		cbi 0x5,1
 528               	.L35:
 122:main.c        **** 		}
 123:main.c        **** 		
 124:main.c        **** 		// Sleep for 1 second
 125:main.c        **** 		watchdog_sleep(T1S);
 529               		.loc 2 125 0
 530 012c 86E0      		ldi r24,lo8(6)
 531 012e 00D0      		rcall watchdog_sleep
 532               	.LVL25:
 533               	.LBE20:
 126:main.c        **** 	}
 534               		.loc 2 126 0
 535 0130 00C0      		rjmp .L36
 536               		.cfi_endproc
 537               	.LFE12:
 539               		.text
 540               	.global	__vector_16
 542               	__vector_16:
 543               	.LFB13:
 127:main.c        **** 	
 128:main.c        **** 	return 0;
 129:main.c        **** }
 130:main.c        **** 
 131:main.c        **** EMPTY_INTERRUPT(ADC_vect);
 544               		.loc 2 131 0
 545               		.cfi_startproc
 546               	/* prologue: naked */
 547               	/* frame size = 0 */
 548               	/* stack size = 0 */
 549               	.L__stack_usage = 0
 550               		.loc 2 131 0
 551               	/* #APP */
 552               	 ;  131 "main.c" 1
 553 00d6 1895      		reti
 554               	 ;  0 "" 2
 555               	/* epilogue start */
 556               	/* #NOAPP */
 557               		.cfi_endproc
 558               	.LFE13:
 560               	.global	__vector_7
 562               	__vector_7:
 563               	.LFB14:
 132:main.c        **** EMPTY_INTERRUPT(WDT_vect);
 564               		.loc 2 132 0
 565               		.cfi_startproc
 566               	/* prologue: naked */
 567               	/* frame size = 0 */
 568               	/* stack size = 0 */
 569               	.L__stack_usage = 0
 570               		.loc 2 132 0
 571               	/* #APP */
 572               	 ;  132 "main.c" 1
 573 00d8 1895      		reti
 574               	 ;  0 "" 2
 575               	/* epilogue start */
 576               	/* #NOAPP */
 577               		.cfi_endproc
 578               	.LFE14:
 580               	.global	__vector_5
 582               	__vector_5:
 583               	.LFB15:
 133:main.c        **** 
 134:main.c        **** ISR(PCINT2_vect) {
 584               		.loc 2 134 0
 585               		.cfi_startproc
 586 00da 1F92      		push r1
 587               	.LCFI0:
 588               		.cfi_def_cfa_offset 3
 589               		.cfi_offset 1, -2
 590 00dc 0F92      		push r0
 591               	.LCFI1:
 592               		.cfi_def_cfa_offset 4
 593               		.cfi_offset 0, -3
 594 00de 0FB6      		in r0,__SREG__
 595 00e0 0F92      		push r0
 596 00e2 1124      		clr __zero_reg__
 597 00e4 8F93      		push r24
 598               	.LCFI2:
 599               		.cfi_def_cfa_offset 5
 600               		.cfi_offset 24, -4
 601 00e6 9F93      		push r25
 602               	.LCFI3:
 603               		.cfi_def_cfa_offset 6
 604               		.cfi_offset 25, -5
 605               	/* prologue: Signal */
 606               	/* frame size = 0 */
 607               	/* stack size = 5 */
 608               	.L__stack_usage = 5
 609               	.LVL26:
 610               	.LBB21:
 611               	.LBB22:
 612               		.loc 3 187 0
 613 00e8 8FE4      		ldi r24,lo8(-15537)
 614 00ea 93EC      		ldi r25,hi8(-15537)
 615 00ec 0197      	1:	sbiw r24,1
 616 00ee 01F4      		brne 1b
 617 00f0 00C0      		rjmp .
 618 00f2 0000      		nop
 619               	.LVL27:
 620               	/* epilogue start */
 621               	.LBE22:
 622               	.LBE21:
 135:main.c        **** 	_delay_ms(200);
 136:main.c        **** }
 623               		.loc 2 136 0
 624 00f4 9F91      		pop r25
 625 00f6 8F91      		pop r24
 626 00f8 0F90      		pop r0
 627 00fa 0FBE      		out __SREG__,r0
 628 00fc 0F90      		pop r0
 629 00fe 1F90      		pop r1
 630 0100 1895      		reti
 631               		.cfi_endproc
 632               	.LFE15:
 634               	.Letext0:
 635               		.file 4 "c:\\winavr-20100110\\avr\\include\\stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:2      *ABS*:0000003e __SP_H__
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:3      *ABS*:0000003d __SP_L__
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:4      *ABS*:0000003f __SREG__
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:12     .text:00000000 system_sleep
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:45     .text:00000018 setup_watchdog
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:104    .text:00000046 turn_off_watchdog
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:146    .text:00000060 watchdog_sleep
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:169    .text:00000066 adc_read
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:220    .text:00000094 setup
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:281    .text.startup:00000000 main
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:542    .text:000000d6 __vector_16
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:562    .text:000000d8 __vector_7
C:\Users\Alex\AppData\Local\Temp\ccBo3WLs.s:582    .text:000000da __vector_5

UNDEFINED SYMBOLS
__udivmodhi4
